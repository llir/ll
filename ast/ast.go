// generated by Textmapper; DO NOT EDIT

package ast

import (
	"github.com/llir/ll"
	"github.com/llir/ll/selector"
)

// Interfaces.

type LlvmNode interface {
	LlvmNode() *Node
}

type NilNode struct{}

var nilInstance = &NilNode{}

// All types implement LlvmNode.
func (n APINotesField) LlvmNode() *Node              { return n.Node }
func (n AShrExpr) LlvmNode() *Node                   { return n.Node }
func (n AShrInst) LlvmNode() *Node                   { return n.Node }
func (n AddExpr) LlvmNode() *Node                    { return n.Node }
func (n AddInst) LlvmNode() *Node                    { return n.Node }
func (n AddrSpace) LlvmNode() *Node                  { return n.Node }
func (n AddrSpaceCastExpr) LlvmNode() *Node          { return n.Node }
func (n AddrSpaceCastInst) LlvmNode() *Node          { return n.Node }
func (n Align) LlvmNode() *Node                      { return n.Node }
func (n AlignField) LlvmNode() *Node                 { return n.Node }
func (n AlignPair) LlvmNode() *Node                  { return n.Node }
func (n AlignStack) LlvmNode() *Node                 { return n.Node }
func (n AlignStackPair) LlvmNode() *Node             { return n.Node }
func (n AlignStackTok) LlvmNode() *Node              { return n.Node }
func (n AllocSize) LlvmNode() *Node                  { return n.Node }
func (n AllocaInst) LlvmNode() *Node                 { return n.Node }
func (n AndExpr) LlvmNode() *Node                    { return n.Node }
func (n AndInst) LlvmNode() *Node                    { return n.Node }
func (n Arg) LlvmNode() *Node                        { return n.Node }
func (n ArgField) LlvmNode() *Node                   { return n.Node }
func (n Args) LlvmNode() *Node                       { return n.Node }
func (n ArrayConst) LlvmNode() *Node                 { return n.Node }
func (n ArrayType) LlvmNode() *Node                  { return n.Node }
func (n Atomic) LlvmNode() *Node                     { return n.Node }
func (n AtomicOp) LlvmNode() *Node                   { return n.Node }
func (n AtomicOrdering) LlvmNode() *Node             { return n.Node }
func (n AtomicRMWInst) LlvmNode() *Node              { return n.Node }
func (n AttrGroupDef) LlvmNode() *Node               { return n.Node }
func (n AttrGroupID) LlvmNode() *Node                { return n.Node }
func (n AttrPair) LlvmNode() *Node                   { return n.Node }
func (n AttrString) LlvmNode() *Node                 { return n.Node }
func (n AttributesField) LlvmNode() *Node            { return n.Node }
func (n BaseTypeField) LlvmNode() *Node              { return n.Node }
func (n BasicBlock) LlvmNode() *Node                 { return n.Node }
func (n BitCastExpr) LlvmNode() *Node                { return n.Node }
func (n BitCastInst) LlvmNode() *Node                { return n.Node }
func (n BlockAddressConst) LlvmNode() *Node          { return n.Node }
func (n BoolConst) LlvmNode() *Node                  { return n.Node }
func (n BoolLit) LlvmNode() *Node                    { return n.Node }
func (n BrTerm) LlvmNode() *Node                     { return n.Node }
func (n ByRefAttr) LlvmNode() *Node                  { return n.Node }
func (n Byval) LlvmNode() *Node                      { return n.Node }
func (n CCField) LlvmNode() *Node                    { return n.Node }
func (n CallBrTerm) LlvmNode() *Node                 { return n.Node }
func (n CallInst) LlvmNode() *Node                   { return n.Node }
func (n CallingConvEnum) LlvmNode() *Node            { return n.Node }
func (n CallingConvInt) LlvmNode() *Node             { return n.Node }
func (n Case) LlvmNode() *Node                       { return n.Node }
func (n CatchPadInst) LlvmNode() *Node               { return n.Node }
func (n CatchRetTerm) LlvmNode() *Node               { return n.Node }
func (n CatchSwitchTerm) LlvmNode() *Node            { return n.Node }
func (n CharArrayConst) LlvmNode() *Node             { return n.Node }
func (n ChecksumField) LlvmNode() *Node              { return n.Node }
func (n ChecksumKind) LlvmNode() *Node               { return n.Node }
func (n ChecksumkindField) LlvmNode() *Node          { return n.Node }
func (n Clause) LlvmNode() *Node                     { return n.Node }
func (n ClauseType) LlvmNode() *Node                 { return n.Node }
func (n Cleanup) LlvmNode() *Node                    { return n.Node }
func (n CleanupPadInst) LlvmNode() *Node             { return n.Node }
func (n CleanupRetTerm) LlvmNode() *Node             { return n.Node }
func (n CmpXchgInst) LlvmNode() *Node                { return n.Node }
func (n ColumnField) LlvmNode() *Node                { return n.Node }
func (n Comdat) LlvmNode() *Node                     { return n.Node }
func (n ComdatDef) LlvmNode() *Node                  { return n.Node }
func (n ComdatName) LlvmNode() *Node                 { return n.Node }
func (n CondBrTerm) LlvmNode() *Node                 { return n.Node }
func (n ConfigMacrosField) LlvmNode() *Node          { return n.Node }
func (n ContainingTypeField) LlvmNode() *Node        { return n.Node }
func (n CountField) LlvmNode() *Node                 { return n.Node }
func (n DIBasicType) LlvmNode() *Node                { return n.Node }
func (n DICommonBlock) LlvmNode() *Node              { return n.Node }
func (n DICompileUnit) LlvmNode() *Node              { return n.Node }
func (n DICompositeType) LlvmNode() *Node            { return n.Node }
func (n DIDerivedType) LlvmNode() *Node              { return n.Node }
func (n DIEnumerator) LlvmNode() *Node               { return n.Node }
func (n DIExpression) LlvmNode() *Node               { return n.Node }
func (n DIFile) LlvmNode() *Node                     { return n.Node }
func (n DIFlagEnum) LlvmNode() *Node                 { return n.Node }
func (n DIFlagInt) LlvmNode() *Node                  { return n.Node }
func (n DIFlags) LlvmNode() *Node                    { return n.Node }
func (n DIGlobalVariable) LlvmNode() *Node           { return n.Node }
func (n DIGlobalVariableExpression) LlvmNode() *Node { return n.Node }
func (n DIImportedEntity) LlvmNode() *Node           { return n.Node }
func (n DILabel) LlvmNode() *Node                    { return n.Node }
func (n DILexicalBlock) LlvmNode() *Node             { return n.Node }
func (n DILexicalBlockFile) LlvmNode() *Node         { return n.Node }
func (n DILocalVariable) LlvmNode() *Node            { return n.Node }
func (n DILocation) LlvmNode() *Node                 { return n.Node }
func (n DIMacro) LlvmNode() *Node                    { return n.Node }
func (n DIMacroFile) LlvmNode() *Node                { return n.Node }
func (n DIModule) LlvmNode() *Node                   { return n.Node }
func (n DINamespace) LlvmNode() *Node                { return n.Node }
func (n DIObjCProperty) LlvmNode() *Node             { return n.Node }
func (n DISPFlagEnum) LlvmNode() *Node               { return n.Node }
func (n DISPFlagInt) LlvmNode() *Node                { return n.Node }
func (n DISPFlags) LlvmNode() *Node                  { return n.Node }
func (n DISubprogram) LlvmNode() *Node               { return n.Node }
func (n DISubrange) LlvmNode() *Node                 { return n.Node }
func (n DISubroutineType) LlvmNode() *Node           { return n.Node }
func (n DITemplateTypeParameter) LlvmNode() *Node    { return n.Node }
func (n DITemplateValueParameter) LlvmNode() *Node   { return n.Node }
func (n DLLStorageClass) LlvmNode() *Node            { return n.Node }
func (n DataLocationField) LlvmNode() *Node          { return n.Node }
func (n DebugInfoForProfilingField) LlvmNode() *Node { return n.Node }
func (n DeclarationField) LlvmNode() *Node           { return n.Node }
func (n DefaultedField) LlvmNode() *Node             { return n.Node }
func (n Dereferenceable) LlvmNode() *Node            { return n.Node }
func (n DereferenceableOrNull) LlvmNode() *Node      { return n.Node }
func (n DirectoryField) LlvmNode() *Node             { return n.Node }
func (n DiscriminatorField) LlvmNode() *Node         { return n.Node }
func (n DiscriminatorIntField) LlvmNode() *Node      { return n.Node }
func (n Distinct) LlvmNode() *Node                   { return n.Node }
func (n DwarfAddressSpaceField) LlvmNode() *Node     { return n.Node }
func (n DwarfAttEncodingEnum) LlvmNode() *Node       { return n.Node }
func (n DwarfAttEncodingInt) LlvmNode() *Node        { return n.Node }
func (n DwarfCCEnum) LlvmNode() *Node                { return n.Node }
func (n DwarfCCInt) LlvmNode() *Node                 { return n.Node }
func (n DwarfLangEnum) LlvmNode() *Node              { return n.Node }
func (n DwarfLangInt) LlvmNode() *Node               { return n.Node }
func (n DwarfMacinfoEnum) LlvmNode() *Node           { return n.Node }
func (n DwarfMacinfoInt) LlvmNode() *Node            { return n.Node }
func (n DwarfOp) LlvmNode() *Node                    { return n.Node }
func (n DwarfTagEnum) LlvmNode() *Node               { return n.Node }
func (n DwarfTagInt) LlvmNode() *Node                { return n.Node }
func (n DwarfVirtualityEnum) LlvmNode() *Node        { return n.Node }
func (n DwarfVirtualityInt) LlvmNode() *Node         { return n.Node }
func (n DwoIdField) LlvmNode() *Node                 { return n.Node }
func (n ElementsField) LlvmNode() *Node              { return n.Node }
func (n Ellipsis) LlvmNode() *Node                   { return n.Node }
func (n EmissionKindEnum) LlvmNode() *Node           { return n.Node }
func (n EmissionKindField) LlvmNode() *Node          { return n.Node }
func (n EmissionKindInt) LlvmNode() *Node            { return n.Node }
func (n EncodingField) LlvmNode() *Node              { return n.Node }
func (n EntityField) LlvmNode() *Node                { return n.Node }
func (n EnumsField) LlvmNode() *Node                 { return n.Node }
func (n Exact) LlvmNode() *Node                      { return n.Node }
func (n ExceptionArg) LlvmNode() *Node               { return n.Node }
func (n ExportSymbolsField) LlvmNode() *Node         { return n.Node }
func (n ExprField) LlvmNode() *Node                  { return n.Node }
func (n ExternLinkage) LlvmNode() *Node              { return n.Node }
func (n ExternallyInitialized) LlvmNode() *Node      { return n.Node }
func (n ExtraDataField) LlvmNode() *Node             { return n.Node }
func (n ExtractElementExpr) LlvmNode() *Node         { return n.Node }
func (n ExtractElementInst) LlvmNode() *Node         { return n.Node }
func (n ExtractValueExpr) LlvmNode() *Node           { return n.Node }
func (n ExtractValueInst) LlvmNode() *Node           { return n.Node }
func (n FAddExpr) LlvmNode() *Node                   { return n.Node }
func (n FAddInst) LlvmNode() *Node                   { return n.Node }
func (n FCmpExpr) LlvmNode() *Node                   { return n.Node }
func (n FCmpInst) LlvmNode() *Node                   { return n.Node }
func (n FDivExpr) LlvmNode() *Node                   { return n.Node }
func (n FDivInst) LlvmNode() *Node                   { return n.Node }
func (n FMulExpr) LlvmNode() *Node                   { return n.Node }
func (n FMulInst) LlvmNode() *Node                   { return n.Node }
func (n FNegExpr) LlvmNode() *Node                   { return n.Node }
func (n FNegInst) LlvmNode() *Node                   { return n.Node }
func (n FPExtExpr) LlvmNode() *Node                  { return n.Node }
func (n FPExtInst) LlvmNode() *Node                  { return n.Node }
func (n FPToSIExpr) LlvmNode() *Node                 { return n.Node }
func (n FPToSIInst) LlvmNode() *Node                 { return n.Node }
func (n FPToUIExpr) LlvmNode() *Node                 { return n.Node }
func (n FPToUIInst) LlvmNode() *Node                 { return n.Node }
func (n FPTruncExpr) LlvmNode() *Node                { return n.Node }
func (n FPTruncInst) LlvmNode() *Node                { return n.Node }
func (n FPred) LlvmNode() *Node                      { return n.Node }
func (n FRemExpr) LlvmNode() *Node                   { return n.Node }
func (n FRemInst) LlvmNode() *Node                   { return n.Node }
func (n FSubExpr) LlvmNode() *Node                   { return n.Node }
func (n FSubInst) LlvmNode() *Node                   { return n.Node }
func (n FastMathFlag) LlvmNode() *Node               { return n.Node }
func (n FenceInst) LlvmNode() *Node                  { return n.Node }
func (n FileField) LlvmNode() *Node                  { return n.Node }
func (n FilenameField) LlvmNode() *Node              { return n.Node }
func (n FlagsField) LlvmNode() *Node                 { return n.Node }
func (n FlagsStringField) LlvmNode() *Node           { return n.Node }
func (n FloatConst) LlvmNode() *Node                 { return n.Node }
func (n FloatKind) LlvmNode() *Node                  { return n.Node }
func (n FloatLit) LlvmNode() *Node                   { return n.Node }
func (n FloatType) LlvmNode() *Node                  { return n.Node }
func (n FreezeInst) LlvmNode() *Node                 { return n.Node }
func (n FuncAttr) LlvmNode() *Node                   { return n.Node }
func (n FuncBody) LlvmNode() *Node                   { return n.Node }
func (n FuncDecl) LlvmNode() *Node                   { return n.Node }
func (n FuncDef) LlvmNode() *Node                    { return n.Node }
func (n FuncHeader) LlvmNode() *Node                 { return n.Node }
func (n FuncType) LlvmNode() *Node                   { return n.Node }
func (n GCNode) LlvmNode() *Node                     { return n.Node }
func (n GEPIndex) LlvmNode() *Node                   { return n.Node }
func (n GenericDINode) LlvmNode() *Node              { return n.Node }
func (n GetElementPtrExpr) LlvmNode() *Node          { return n.Node }
func (n GetElementPtrInst) LlvmNode() *Node          { return n.Node }
func (n GetterField) LlvmNode() *Node                { return n.Node }
func (n GlobalDecl) LlvmNode() *Node                 { return n.Node }
func (n GlobalIdent) LlvmNode() *Node                { return n.Node }
func (n GlobalsField) LlvmNode() *Node               { return n.Node }
func (n Handlers) LlvmNode() *Node                   { return n.Node }
func (n HeaderField) LlvmNode() *Node                { return n.Node }
func (n ICmpExpr) LlvmNode() *Node                   { return n.Node }
func (n ICmpInst) LlvmNode() *Node                   { return n.Node }
func (n IPred) LlvmNode() *Node                      { return n.Node }
func (n IdentifierField) LlvmNode() *Node            { return n.Node }
func (n Immutable) LlvmNode() *Node                  { return n.Node }
func (n ImportsField) LlvmNode() *Node               { return n.Node }
func (n InAlloca) LlvmNode() *Node                   { return n.Node }
func (n InBounds) LlvmNode() *Node                   { return n.Node }
func (n InRange) LlvmNode() *Node                    { return n.Node }
func (n Inc) LlvmNode() *Node                        { return n.Node }
func (n IncludePathField) LlvmNode() *Node           { return n.Node }
func (n IndirectBrTerm) LlvmNode() *Node             { return n.Node }
func (n IndirectSymbolDef) LlvmNode() *Node          { return n.Node }
func (n IndirectSymbolKind) LlvmNode() *Node         { return n.Node }
func (n InlineAsm) LlvmNode() *Node                  { return n.Node }
func (n InlinedAtField) LlvmNode() *Node             { return n.Node }
func (n InsertElementExpr) LlvmNode() *Node          { return n.Node }
func (n InsertElementInst) LlvmNode() *Node          { return n.Node }
func (n InsertValueExpr) LlvmNode() *Node            { return n.Node }
func (n InsertValueInst) LlvmNode() *Node            { return n.Node }
func (n IntConst) LlvmNode() *Node                   { return n.Node }
func (n IntLit) LlvmNode() *Node                     { return n.Node }
func (n IntToPtrExpr) LlvmNode() *Node               { return n.Node }
func (n IntToPtrInst) LlvmNode() *Node               { return n.Node }
func (n IntType) LlvmNode() *Node                    { return n.Node }
func (n IntelDialect) LlvmNode() *Node               { return n.Node }
func (n InvokeTerm) LlvmNode() *Node                 { return n.Node }
func (n IsDeclField) LlvmNode() *Node                { return n.Node }
func (n IsDefinitionField) LlvmNode() *Node          { return n.Node }
func (n IsImplicitCodeField) LlvmNode() *Node        { return n.Node }
func (n IsLocalField) LlvmNode() *Node               { return n.Node }
func (n IsOptimizedField) LlvmNode() *Node           { return n.Node }
func (n IsUnsignedField) LlvmNode() *Node            { return n.Node }
func (n LShrExpr) LlvmNode() *Node                   { return n.Node }
func (n LShrInst) LlvmNode() *Node                   { return n.Node }
func (n Label) LlvmNode() *Node                      { return n.Node }
func (n LabelIdent) LlvmNode() *Node                 { return n.Node }
func (n LabelType) LlvmNode() *Node                  { return n.Node }
func (n LandingPadInst) LlvmNode() *Node             { return n.Node }
func (n LanguageField) LlvmNode() *Node              { return n.Node }
func (n LineField) LlvmNode() *Node                  { return n.Node }
func (n Linkage) LlvmNode() *Node                    { return n.Node }
func (n LinkageNameField) LlvmNode() *Node           { return n.Node }
func (n LoadInst) LlvmNode() *Node                   { return n.Node }
func (n LocalDefInst) LlvmNode() *Node               { return n.Node }
func (n LocalDefTerm) LlvmNode() *Node               { return n.Node }
func (n LocalIdent) LlvmNode() *Node                 { return n.Node }
func (n LowerBoundField) LlvmNode() *Node            { return n.Node }
func (n MDString) LlvmNode() *Node                   { return n.Node }
func (n MDTuple) LlvmNode() *Node                    { return n.Node }
func (n MMXType) LlvmNode() *Node                    { return n.Node }
func (n MacrosField) LlvmNode() *Node                { return n.Node }
func (n MetadataAttachment) LlvmNode() *Node         { return n.Node }
func (n MetadataDef) LlvmNode() *Node                { return n.Node }
func (n MetadataID) LlvmNode() *Node                 { return n.Node }
func (n MetadataName) LlvmNode() *Node               { return n.Node }
func (n MetadataType) LlvmNode() *Node               { return n.Node }
func (n Module) LlvmNode() *Node                     { return n.Node }
func (n ModuleAsm) LlvmNode() *Node                  { return n.Node }
func (n MulExpr) LlvmNode() *Node                    { return n.Node }
func (n MulInst) LlvmNode() *Node                    { return n.Node }
func (n NameField) LlvmNode() *Node                  { return n.Node }
func (n NameTableKindEnum) LlvmNode() *Node          { return n.Node }
func (n NameTableKindField) LlvmNode() *Node         { return n.Node }
func (n NameTableKindInt) LlvmNode() *Node           { return n.Node }
func (n NamedMetadataDef) LlvmNode() *Node           { return n.Node }
func (n NamedType) LlvmNode() *Node                  { return n.Node }
func (n NodesField) LlvmNode() *Node                 { return n.Node }
func (n NoneConst) LlvmNode() *Node                  { return n.Node }
func (n NullConst) LlvmNode() *Node                  { return n.Node }
func (n NullLit) LlvmNode() *Node                    { return n.Node }
func (n OffsetField) LlvmNode() *Node                { return n.Node }
func (n OpaqueType) LlvmNode() *Node                 { return n.Node }
func (n OperandBundle) LlvmNode() *Node              { return n.Node }
func (n OperandsField) LlvmNode() *Node              { return n.Node }
func (n OrExpr) LlvmNode() *Node                     { return n.Node }
func (n OrInst) LlvmNode() *Node                     { return n.Node }
func (n OverflowFlag) LlvmNode() *Node               { return n.Node }
func (n PackedStructType) LlvmNode() *Node           { return n.Node }
func (n Param) LlvmNode() *Node                      { return n.Node }
func (n ParamAttr) LlvmNode() *Node                  { return n.Node }
func (n Params) LlvmNode() *Node                     { return n.Node }
func (n Partition) LlvmNode() *Node                  { return n.Node }
func (n Personality) LlvmNode() *Node                { return n.Node }
func (n PhiInst) LlvmNode() *Node                    { return n.Node }
func (n PointerType) LlvmNode() *Node                { return n.Node }
func (n Preallocated) LlvmNode() *Node               { return n.Node }
func (n Preemption) LlvmNode() *Node                 { return n.Node }
func (n Prefix) LlvmNode() *Node                     { return n.Node }
func (n ProducerField) LlvmNode() *Node              { return n.Node }
func (n Prologue) LlvmNode() *Node                   { return n.Node }
func (n PtrToIntExpr) LlvmNode() *Node               { return n.Node }
func (n PtrToIntInst) LlvmNode() *Node               { return n.Node }
func (n RangesBaseAddressField) LlvmNode() *Node     { return n.Node }
func (n ResumeTerm) LlvmNode() *Node                 { return n.Node }
func (n RetTerm) LlvmNode() *Node                    { return n.Node }
func (n RetainedNodesField) LlvmNode() *Node         { return n.Node }
func (n RetainedTypesField) LlvmNode() *Node         { return n.Node }
func (n ReturnAttr) LlvmNode() *Node                 { return n.Node }
func (n RuntimeLangField) LlvmNode() *Node           { return n.Node }
func (n RuntimeVersionField) LlvmNode() *Node        { return n.Node }
func (n SDKField) LlvmNode() *Node                   { return n.Node }
func (n SDivExpr) LlvmNode() *Node                   { return n.Node }
func (n SDivInst) LlvmNode() *Node                   { return n.Node }
func (n SExtExpr) LlvmNode() *Node                   { return n.Node }
func (n SExtInst) LlvmNode() *Node                   { return n.Node }
func (n SIToFPExpr) LlvmNode() *Node                 { return n.Node }
func (n SIToFPInst) LlvmNode() *Node                 { return n.Node }
func (n SPFlagsField) LlvmNode() *Node               { return n.Node }
func (n SRemExpr) LlvmNode() *Node                   { return n.Node }
func (n SRemInst) LlvmNode() *Node                   { return n.Node }
func (n ScalableVectorType) LlvmNode() *Node         { return n.Node }
func (n ScopeField) LlvmNode() *Node                 { return n.Node }
func (n ScopeLineField) LlvmNode() *Node             { return n.Node }
func (n Section) LlvmNode() *Node                    { return n.Node }
func (n SelectExpr) LlvmNode() *Node                 { return n.Node }
func (n SelectInst) LlvmNode() *Node                 { return n.Node }
func (n SelectionKind) LlvmNode() *Node              { return n.Node }
func (n SetterField) LlvmNode() *Node                { return n.Node }
func (n ShlExpr) LlvmNode() *Node                    { return n.Node }
func (n ShlInst) LlvmNode() *Node                    { return n.Node }
func (n ShuffleVectorExpr) LlvmNode() *Node          { return n.Node }
func (n ShuffleVectorInst) LlvmNode() *Node          { return n.Node }
func (n SideEffect) LlvmNode() *Node                 { return n.Node }
func (n SizeField) LlvmNode() *Node                  { return n.Node }
func (n SourceField) LlvmNode() *Node                { return n.Node }
func (n SourceFilename) LlvmNode() *Node             { return n.Node }
func (n SplitDebugFilenameField) LlvmNode() *Node    { return n.Node }
func (n SplitDebugInliningField) LlvmNode() *Node    { return n.Node }
func (n StoreInst) LlvmNode() *Node                  { return n.Node }
func (n StrideField) LlvmNode() *Node                { return n.Node }
func (n StringLit) LlvmNode() *Node                  { return n.Node }
func (n StructConst) LlvmNode() *Node                { return n.Node }
func (n StructRetAttr) LlvmNode() *Node              { return n.Node }
func (n StructType) LlvmNode() *Node                 { return n.Node }
func (n SubExpr) LlvmNode() *Node                    { return n.Node }
func (n SubInst) LlvmNode() *Node                    { return n.Node }
func (n SwiftError) LlvmNode() *Node                 { return n.Node }
func (n SwitchTerm) LlvmNode() *Node                 { return n.Node }
func (n SyncScope) LlvmNode() *Node                  { return n.Node }
func (n SysrootField) LlvmNode() *Node               { return n.Node }
func (n TLSModel) LlvmNode() *Node                   { return n.Node }
func (n TagField) LlvmNode() *Node                   { return n.Node }
func (n Tail) LlvmNode() *Node                       { return n.Node }
func (n TargetDataLayout) LlvmNode() *Node           { return n.Node }
func (n TargetTriple) LlvmNode() *Node               { return n.Node }
func (n TemplateParamsField) LlvmNode() *Node        { return n.Node }
func (n ThisAdjustmentField) LlvmNode() *Node        { return n.Node }
func (n ThreadLocal) LlvmNode() *Node                { return n.Node }
func (n ThrownTypesField) LlvmNode() *Node           { return n.Node }
func (n TokenType) LlvmNode() *Node                  { return n.Node }
func (n TruncExpr) LlvmNode() *Node                  { return n.Node }
func (n TruncInst) LlvmNode() *Node                  { return n.Node }
func (n TypeConst) LlvmNode() *Node                  { return n.Node }
func (n TypeDef) LlvmNode() *Node                    { return n.Node }
func (n TypeField) LlvmNode() *Node                  { return n.Node }
func (n TypeMacinfoField) LlvmNode() *Node           { return n.Node }
func (n TypeValue) LlvmNode() *Node                  { return n.Node }
func (n TypesField) LlvmNode() *Node                 { return n.Node }
func (n UDivExpr) LlvmNode() *Node                   { return n.Node }
func (n UDivInst) LlvmNode() *Node                   { return n.Node }
func (n UIToFPExpr) LlvmNode() *Node                 { return n.Node }
func (n UIToFPInst) LlvmNode() *Node                 { return n.Node }
func (n URemExpr) LlvmNode() *Node                   { return n.Node }
func (n URemInst) LlvmNode() *Node                   { return n.Node }
func (n UintLit) LlvmNode() *Node                    { return n.Node }
func (n UndefConst) LlvmNode() *Node                 { return n.Node }
func (n UnitField) LlvmNode() *Node                  { return n.Node }
func (n UnnamedAddr) LlvmNode() *Node                { return n.Node }
func (n UnreachableTerm) LlvmNode() *Node            { return n.Node }
func (n UnwindToCaller) LlvmNode() *Node             { return n.Node }
func (n UpperBoundField) LlvmNode() *Node            { return n.Node }
func (n UseListOrder) LlvmNode() *Node               { return n.Node }
func (n UseListOrderBB) LlvmNode() *Node             { return n.Node }
func (n VAArgInst) LlvmNode() *Node                  { return n.Node }
func (n ValueField) LlvmNode() *Node                 { return n.Node }
func (n ValueIntField) LlvmNode() *Node              { return n.Node }
func (n ValueStringField) LlvmNode() *Node           { return n.Node }
func (n VarField) LlvmNode() *Node                   { return n.Node }
func (n VectorConst) LlvmNode() *Node                { return n.Node }
func (n VectorType) LlvmNode() *Node                 { return n.Node }
func (n VirtualIndexField) LlvmNode() *Node          { return n.Node }
func (n VirtualityField) LlvmNode() *Node            { return n.Node }
func (n Visibility) LlvmNode() *Node                 { return n.Node }
func (n VoidType) LlvmNode() *Node                   { return n.Node }
func (n Volatile) LlvmNode() *Node                   { return n.Node }
func (n VtableHolderField) LlvmNode() *Node          { return n.Node }
func (n Weak) LlvmNode() *Node                       { return n.Node }
func (n XorExpr) LlvmNode() *Node                    { return n.Node }
func (n XorInst) LlvmNode() *Node                    { return n.Node }
func (n ZExtExpr) LlvmNode() *Node                   { return n.Node }
func (n ZExtInst) LlvmNode() *Node                   { return n.Node }
func (n ZeroInitializerConst) LlvmNode() *Node       { return n.Node }
func (NilNode) LlvmNode() *Node                      { return nil }

type CallingConv interface {
	LlvmNode
	callingConvNode()
}

// callingConvNode() ensures that only the following types can be
// assigned to CallingConv.
//
func (CallingConvEnum) callingConvNode() {}
func (CallingConvInt) callingConvNode()  {}
func (NilNode) callingConvNode()         {}

type ConcreteType interface {
	LlvmNode
	concreteTypeNode()
}

// concreteTypeNode() ensures that only the following types can be
// assigned to ConcreteType.
//
func (ArrayType) concreteTypeNode()          {}
func (FloatType) concreteTypeNode()          {}
func (IntType) concreteTypeNode()            {}
func (LabelType) concreteTypeNode()          {}
func (MMXType) concreteTypeNode()            {}
func (NamedType) concreteTypeNode()          {}
func (PackedStructType) concreteTypeNode()   {}
func (PointerType) concreteTypeNode()        {}
func (ScalableVectorType) concreteTypeNode() {}
func (StructType) concreteTypeNode()         {}
func (TokenType) concreteTypeNode()          {}
func (VectorType) concreteTypeNode()         {}
func (NilNode) concreteTypeNode()            {}

type Constant interface {
	LlvmNode
	constantNode()
}

// constantNode() ensures that only the following types can be
// assigned to Constant.
//
func (AShrExpr) constantNode()             {}
func (AddExpr) constantNode()              {}
func (AddrSpaceCastExpr) constantNode()    {}
func (AndExpr) constantNode()              {}
func (ArrayConst) constantNode()           {}
func (BitCastExpr) constantNode()          {}
func (BlockAddressConst) constantNode()    {}
func (BoolConst) constantNode()            {}
func (CharArrayConst) constantNode()       {}
func (ExtractElementExpr) constantNode()   {}
func (ExtractValueExpr) constantNode()     {}
func (FAddExpr) constantNode()             {}
func (FCmpExpr) constantNode()             {}
func (FDivExpr) constantNode()             {}
func (FMulExpr) constantNode()             {}
func (FNegExpr) constantNode()             {}
func (FPExtExpr) constantNode()            {}
func (FPToSIExpr) constantNode()           {}
func (FPToUIExpr) constantNode()           {}
func (FPTruncExpr) constantNode()          {}
func (FRemExpr) constantNode()             {}
func (FSubExpr) constantNode()             {}
func (FloatConst) constantNode()           {}
func (GetElementPtrExpr) constantNode()    {}
func (GlobalIdent) constantNode()          {}
func (ICmpExpr) constantNode()             {}
func (InsertElementExpr) constantNode()    {}
func (InsertValueExpr) constantNode()      {}
func (IntConst) constantNode()             {}
func (IntToPtrExpr) constantNode()         {}
func (LShrExpr) constantNode()             {}
func (MulExpr) constantNode()              {}
func (NoneConst) constantNode()            {}
func (NullConst) constantNode()            {}
func (OrExpr) constantNode()               {}
func (PtrToIntExpr) constantNode()         {}
func (SDivExpr) constantNode()             {}
func (SExtExpr) constantNode()             {}
func (SIToFPExpr) constantNode()           {}
func (SRemExpr) constantNode()             {}
func (SelectExpr) constantNode()           {}
func (ShlExpr) constantNode()              {}
func (ShuffleVectorExpr) constantNode()    {}
func (StructConst) constantNode()          {}
func (SubExpr) constantNode()              {}
func (TruncExpr) constantNode()            {}
func (UDivExpr) constantNode()             {}
func (UIToFPExpr) constantNode()           {}
func (URemExpr) constantNode()             {}
func (UndefConst) constantNode()           {}
func (VectorConst) constantNode()          {}
func (XorExpr) constantNode()              {}
func (ZExtExpr) constantNode()             {}
func (ZeroInitializerConst) constantNode() {}
func (NilNode) constantNode()              {}

type ConstantExpr interface {
	LlvmNode
	constantExprNode()
}

// constantExprNode() ensures that only the following types can be
// assigned to ConstantExpr.
//
func (AShrExpr) constantExprNode()           {}
func (AddExpr) constantExprNode()            {}
func (AddrSpaceCastExpr) constantExprNode()  {}
func (AndExpr) constantExprNode()            {}
func (BitCastExpr) constantExprNode()        {}
func (ExtractElementExpr) constantExprNode() {}
func (ExtractValueExpr) constantExprNode()   {}
func (FAddExpr) constantExprNode()           {}
func (FCmpExpr) constantExprNode()           {}
func (FDivExpr) constantExprNode()           {}
func (FMulExpr) constantExprNode()           {}
func (FNegExpr) constantExprNode()           {}
func (FPExtExpr) constantExprNode()          {}
func (FPToSIExpr) constantExprNode()         {}
func (FPToUIExpr) constantExprNode()         {}
func (FPTruncExpr) constantExprNode()        {}
func (FRemExpr) constantExprNode()           {}
func (FSubExpr) constantExprNode()           {}
func (GetElementPtrExpr) constantExprNode()  {}
func (ICmpExpr) constantExprNode()           {}
func (InsertElementExpr) constantExprNode()  {}
func (InsertValueExpr) constantExprNode()    {}
func (IntToPtrExpr) constantExprNode()       {}
func (LShrExpr) constantExprNode()           {}
func (MulExpr) constantExprNode()            {}
func (OrExpr) constantExprNode()             {}
func (PtrToIntExpr) constantExprNode()       {}
func (SDivExpr) constantExprNode()           {}
func (SExtExpr) constantExprNode()           {}
func (SIToFPExpr) constantExprNode()         {}
func (SRemExpr) constantExprNode()           {}
func (SelectExpr) constantExprNode()         {}
func (ShlExpr) constantExprNode()            {}
func (ShuffleVectorExpr) constantExprNode()  {}
func (SubExpr) constantExprNode()            {}
func (TruncExpr) constantExprNode()          {}
func (UDivExpr) constantExprNode()           {}
func (UIToFPExpr) constantExprNode()         {}
func (URemExpr) constantExprNode()           {}
func (XorExpr) constantExprNode()            {}
func (ZExtExpr) constantExprNode()           {}
func (NilNode) constantExprNode()            {}

type DIBasicTypeField interface {
	LlvmNode
	dIBasicTypeFieldNode()
}

// dIBasicTypeFieldNode() ensures that only the following types can be
// assigned to DIBasicTypeField.
//
func (AlignField) dIBasicTypeFieldNode()    {}
func (EncodingField) dIBasicTypeFieldNode() {}
func (FlagsField) dIBasicTypeFieldNode()    {}
func (NameField) dIBasicTypeFieldNode()     {}
func (SizeField) dIBasicTypeFieldNode()     {}
func (TagField) dIBasicTypeFieldNode()      {}
func (NilNode) dIBasicTypeFieldNode()       {}

type DICommonBlockField interface {
	LlvmNode
	dICommonBlockFieldNode()
}

// dICommonBlockFieldNode() ensures that only the following types can be
// assigned to DICommonBlockField.
//
func (DeclarationField) dICommonBlockFieldNode() {}
func (FileField) dICommonBlockFieldNode()        {}
func (LineField) dICommonBlockFieldNode()        {}
func (NameField) dICommonBlockFieldNode()        {}
func (ScopeField) dICommonBlockFieldNode()       {}
func (NilNode) dICommonBlockFieldNode()          {}

type DICompileUnitField interface {
	LlvmNode
	dICompileUnitFieldNode()
}

// dICompileUnitFieldNode() ensures that only the following types can be
// assigned to DICompileUnitField.
//
func (DebugInfoForProfilingField) dICompileUnitFieldNode() {}
func (DwoIdField) dICompileUnitFieldNode()                 {}
func (EmissionKindField) dICompileUnitFieldNode()          {}
func (EnumsField) dICompileUnitFieldNode()                 {}
func (FileField) dICompileUnitFieldNode()                  {}
func (FlagsStringField) dICompileUnitFieldNode()           {}
func (GlobalsField) dICompileUnitFieldNode()               {}
func (ImportsField) dICompileUnitFieldNode()               {}
func (IsOptimizedField) dICompileUnitFieldNode()           {}
func (LanguageField) dICompileUnitFieldNode()              {}
func (MacrosField) dICompileUnitFieldNode()                {}
func (NameTableKindField) dICompileUnitFieldNode()         {}
func (ProducerField) dICompileUnitFieldNode()              {}
func (RangesBaseAddressField) dICompileUnitFieldNode()     {}
func (RetainedTypesField) dICompileUnitFieldNode()         {}
func (RuntimeVersionField) dICompileUnitFieldNode()        {}
func (SDKField) dICompileUnitFieldNode()                   {}
func (SplitDebugFilenameField) dICompileUnitFieldNode()    {}
func (SplitDebugInliningField) dICompileUnitFieldNode()    {}
func (SysrootField) dICompileUnitFieldNode()               {}
func (NilNode) dICompileUnitFieldNode()                    {}

type DICompositeTypeField interface {
	LlvmNode
	dICompositeTypeFieldNode()
}

// dICompositeTypeFieldNode() ensures that only the following types can be
// assigned to DICompositeTypeField.
//
func (AlignField) dICompositeTypeFieldNode()          {}
func (BaseTypeField) dICompositeTypeFieldNode()       {}
func (DataLocationField) dICompositeTypeFieldNode()   {}
func (DiscriminatorField) dICompositeTypeFieldNode()  {}
func (ElementsField) dICompositeTypeFieldNode()       {}
func (FileField) dICompositeTypeFieldNode()           {}
func (FlagsField) dICompositeTypeFieldNode()          {}
func (IdentifierField) dICompositeTypeFieldNode()     {}
func (LineField) dICompositeTypeFieldNode()           {}
func (NameField) dICompositeTypeFieldNode()           {}
func (OffsetField) dICompositeTypeFieldNode()         {}
func (RuntimeLangField) dICompositeTypeFieldNode()    {}
func (ScopeField) dICompositeTypeFieldNode()          {}
func (SizeField) dICompositeTypeFieldNode()           {}
func (TagField) dICompositeTypeFieldNode()            {}
func (TemplateParamsField) dICompositeTypeFieldNode() {}
func (VtableHolderField) dICompositeTypeFieldNode()   {}
func (NilNode) dICompositeTypeFieldNode()             {}

type DIDerivedTypeField interface {
	LlvmNode
	dIDerivedTypeFieldNode()
}

// dIDerivedTypeFieldNode() ensures that only the following types can be
// assigned to DIDerivedTypeField.
//
func (AlignField) dIDerivedTypeFieldNode()             {}
func (BaseTypeField) dIDerivedTypeFieldNode()          {}
func (DwarfAddressSpaceField) dIDerivedTypeFieldNode() {}
func (ExtraDataField) dIDerivedTypeFieldNode()         {}
func (FileField) dIDerivedTypeFieldNode()              {}
func (FlagsField) dIDerivedTypeFieldNode()             {}
func (LineField) dIDerivedTypeFieldNode()              {}
func (NameField) dIDerivedTypeFieldNode()              {}
func (OffsetField) dIDerivedTypeFieldNode()            {}
func (ScopeField) dIDerivedTypeFieldNode()             {}
func (SizeField) dIDerivedTypeFieldNode()              {}
func (TagField) dIDerivedTypeFieldNode()               {}
func (NilNode) dIDerivedTypeFieldNode()                {}

type DIEnumeratorField interface {
	LlvmNode
	dIEnumeratorFieldNode()
}

// dIEnumeratorFieldNode() ensures that only the following types can be
// assigned to DIEnumeratorField.
//
func (IsUnsignedField) dIEnumeratorFieldNode() {}
func (NameField) dIEnumeratorFieldNode()       {}
func (ValueIntField) dIEnumeratorFieldNode()   {}
func (NilNode) dIEnumeratorFieldNode()         {}

type DIExpressionField interface {
	LlvmNode
	dIExpressionFieldNode()
}

// dIExpressionFieldNode() ensures that only the following types can be
// assigned to DIExpressionField.
//
func (DwarfAttEncodingEnum) dIExpressionFieldNode() {}
func (DwarfOp) dIExpressionFieldNode()              {}
func (UintLit) dIExpressionFieldNode()              {}
func (NilNode) dIExpressionFieldNode()              {}

type DIFileField interface {
	LlvmNode
	dIFileFieldNode()
}

// dIFileFieldNode() ensures that only the following types can be
// assigned to DIFileField.
//
func (ChecksumField) dIFileFieldNode()     {}
func (ChecksumkindField) dIFileFieldNode() {}
func (DirectoryField) dIFileFieldNode()    {}
func (FilenameField) dIFileFieldNode()     {}
func (SourceField) dIFileFieldNode()       {}
func (NilNode) dIFileFieldNode()           {}

type DIFlag interface {
	LlvmNode
	dIFlagNode()
}

// dIFlagNode() ensures that only the following types can be
// assigned to DIFlag.
//
func (DIFlagEnum) dIFlagNode() {}
func (DIFlagInt) dIFlagNode()  {}
func (NilNode) dIFlagNode()    {}

type DIGlobalVariableExpressionField interface {
	LlvmNode
	dIGlobalVariableExpressionFieldNode()
}

// dIGlobalVariableExpressionFieldNode() ensures that only the following types can be
// assigned to DIGlobalVariableExpressionField.
//
func (ExprField) dIGlobalVariableExpressionFieldNode() {}
func (VarField) dIGlobalVariableExpressionFieldNode()  {}
func (NilNode) dIGlobalVariableExpressionFieldNode()   {}

type DIGlobalVariableField interface {
	LlvmNode
	dIGlobalVariableFieldNode()
}

// dIGlobalVariableFieldNode() ensures that only the following types can be
// assigned to DIGlobalVariableField.
//
func (AlignField) dIGlobalVariableFieldNode()          {}
func (DeclarationField) dIGlobalVariableFieldNode()    {}
func (FileField) dIGlobalVariableFieldNode()           {}
func (IsDefinitionField) dIGlobalVariableFieldNode()   {}
func (IsLocalField) dIGlobalVariableFieldNode()        {}
func (LineField) dIGlobalVariableFieldNode()           {}
func (LinkageNameField) dIGlobalVariableFieldNode()    {}
func (NameField) dIGlobalVariableFieldNode()           {}
func (ScopeField) dIGlobalVariableFieldNode()          {}
func (TemplateParamsField) dIGlobalVariableFieldNode() {}
func (TypeField) dIGlobalVariableFieldNode()           {}
func (NilNode) dIGlobalVariableFieldNode()             {}

type DIImportedEntityField interface {
	LlvmNode
	dIImportedEntityFieldNode()
}

// dIImportedEntityFieldNode() ensures that only the following types can be
// assigned to DIImportedEntityField.
//
func (EntityField) dIImportedEntityFieldNode() {}
func (FileField) dIImportedEntityFieldNode()   {}
func (LineField) dIImportedEntityFieldNode()   {}
func (NameField) dIImportedEntityFieldNode()   {}
func (ScopeField) dIImportedEntityFieldNode()  {}
func (TagField) dIImportedEntityFieldNode()    {}
func (NilNode) dIImportedEntityFieldNode()     {}

type DILabelField interface {
	LlvmNode
	dILabelFieldNode()
}

// dILabelFieldNode() ensures that only the following types can be
// assigned to DILabelField.
//
func (FileField) dILabelFieldNode()  {}
func (LineField) dILabelFieldNode()  {}
func (NameField) dILabelFieldNode()  {}
func (ScopeField) dILabelFieldNode() {}
func (NilNode) dILabelFieldNode()    {}

type DILexicalBlockField interface {
	LlvmNode
	dILexicalBlockFieldNode()
}

// dILexicalBlockFieldNode() ensures that only the following types can be
// assigned to DILexicalBlockField.
//
func (ColumnField) dILexicalBlockFieldNode() {}
func (FileField) dILexicalBlockFieldNode()   {}
func (LineField) dILexicalBlockFieldNode()   {}
func (ScopeField) dILexicalBlockFieldNode()  {}
func (NilNode) dILexicalBlockFieldNode()     {}

type DILexicalBlockFileField interface {
	LlvmNode
	dILexicalBlockFileFieldNode()
}

// dILexicalBlockFileFieldNode() ensures that only the following types can be
// assigned to DILexicalBlockFileField.
//
func (DiscriminatorIntField) dILexicalBlockFileFieldNode() {}
func (FileField) dILexicalBlockFileFieldNode()             {}
func (ScopeField) dILexicalBlockFileFieldNode()            {}
func (NilNode) dILexicalBlockFileFieldNode()               {}

type DILocalVariableField interface {
	LlvmNode
	dILocalVariableFieldNode()
}

// dILocalVariableFieldNode() ensures that only the following types can be
// assigned to DILocalVariableField.
//
func (AlignField) dILocalVariableFieldNode() {}
func (ArgField) dILocalVariableFieldNode()   {}
func (FileField) dILocalVariableFieldNode()  {}
func (FlagsField) dILocalVariableFieldNode() {}
func (LineField) dILocalVariableFieldNode()  {}
func (NameField) dILocalVariableFieldNode()  {}
func (ScopeField) dILocalVariableFieldNode() {}
func (TypeField) dILocalVariableFieldNode()  {}
func (NilNode) dILocalVariableFieldNode()    {}

type DILocationField interface {
	LlvmNode
	dILocationFieldNode()
}

// dILocationFieldNode() ensures that only the following types can be
// assigned to DILocationField.
//
func (ColumnField) dILocationFieldNode()         {}
func (InlinedAtField) dILocationFieldNode()      {}
func (IsImplicitCodeField) dILocationFieldNode() {}
func (LineField) dILocationFieldNode()           {}
func (ScopeField) dILocationFieldNode()          {}
func (NilNode) dILocationFieldNode()             {}

type DIMacroField interface {
	LlvmNode
	dIMacroFieldNode()
}

// dIMacroFieldNode() ensures that only the following types can be
// assigned to DIMacroField.
//
func (LineField) dIMacroFieldNode()        {}
func (NameField) dIMacroFieldNode()        {}
func (TypeMacinfoField) dIMacroFieldNode() {}
func (ValueStringField) dIMacroFieldNode() {}
func (NilNode) dIMacroFieldNode()          {}

type DIMacroFileField interface {
	LlvmNode
	dIMacroFileFieldNode()
}

// dIMacroFileFieldNode() ensures that only the following types can be
// assigned to DIMacroFileField.
//
func (FileField) dIMacroFileFieldNode()        {}
func (LineField) dIMacroFileFieldNode()        {}
func (NodesField) dIMacroFileFieldNode()       {}
func (TypeMacinfoField) dIMacroFileFieldNode() {}
func (NilNode) dIMacroFileFieldNode()          {}

type DIModuleField interface {
	LlvmNode
	dIModuleFieldNode()
}

// dIModuleFieldNode() ensures that only the following types can be
// assigned to DIModuleField.
//
func (APINotesField) dIModuleFieldNode()     {}
func (ConfigMacrosField) dIModuleFieldNode() {}
func (FileField) dIModuleFieldNode()         {}
func (IncludePathField) dIModuleFieldNode()  {}
func (IsDeclField) dIModuleFieldNode()       {}
func (LineField) dIModuleFieldNode()         {}
func (NameField) dIModuleFieldNode()         {}
func (ScopeField) dIModuleFieldNode()        {}
func (NilNode) dIModuleFieldNode()           {}

type DINamespaceField interface {
	LlvmNode
	dINamespaceFieldNode()
}

// dINamespaceFieldNode() ensures that only the following types can be
// assigned to DINamespaceField.
//
func (ExportSymbolsField) dINamespaceFieldNode() {}
func (NameField) dINamespaceFieldNode()          {}
func (ScopeField) dINamespaceFieldNode()         {}
func (NilNode) dINamespaceFieldNode()            {}

type DIObjCPropertyField interface {
	LlvmNode
	dIObjCPropertyFieldNode()
}

// dIObjCPropertyFieldNode() ensures that only the following types can be
// assigned to DIObjCPropertyField.
//
func (AttributesField) dIObjCPropertyFieldNode() {}
func (FileField) dIObjCPropertyFieldNode()       {}
func (GetterField) dIObjCPropertyFieldNode()     {}
func (LineField) dIObjCPropertyFieldNode()       {}
func (NameField) dIObjCPropertyFieldNode()       {}
func (SetterField) dIObjCPropertyFieldNode()     {}
func (TypeField) dIObjCPropertyFieldNode()       {}
func (NilNode) dIObjCPropertyFieldNode()         {}

type DISPFlag interface {
	LlvmNode
	dISPFlagNode()
}

// dISPFlagNode() ensures that only the following types can be
// assigned to DISPFlag.
//
func (DISPFlagEnum) dISPFlagNode() {}
func (DISPFlagInt) dISPFlagNode()  {}
func (NilNode) dISPFlagNode()      {}

type DISubprogramField interface {
	LlvmNode
	dISubprogramFieldNode()
}

// dISubprogramFieldNode() ensures that only the following types can be
// assigned to DISubprogramField.
//
func (ContainingTypeField) dISubprogramFieldNode() {}
func (DeclarationField) dISubprogramFieldNode()    {}
func (FileField) dISubprogramFieldNode()           {}
func (FlagsField) dISubprogramFieldNode()          {}
func (IsDefinitionField) dISubprogramFieldNode()   {}
func (IsLocalField) dISubprogramFieldNode()        {}
func (IsOptimizedField) dISubprogramFieldNode()    {}
func (LineField) dISubprogramFieldNode()           {}
func (LinkageNameField) dISubprogramFieldNode()    {}
func (NameField) dISubprogramFieldNode()           {}
func (RetainedNodesField) dISubprogramFieldNode()  {}
func (SPFlagsField) dISubprogramFieldNode()        {}
func (ScopeField) dISubprogramFieldNode()          {}
func (ScopeLineField) dISubprogramFieldNode()      {}
func (TemplateParamsField) dISubprogramFieldNode() {}
func (ThisAdjustmentField) dISubprogramFieldNode() {}
func (ThrownTypesField) dISubprogramFieldNode()    {}
func (TypeField) dISubprogramFieldNode()           {}
func (UnitField) dISubprogramFieldNode()           {}
func (VirtualIndexField) dISubprogramFieldNode()   {}
func (VirtualityField) dISubprogramFieldNode()     {}
func (NilNode) dISubprogramFieldNode()             {}

type DISubrangeField interface {
	LlvmNode
	dISubrangeFieldNode()
}

// dISubrangeFieldNode() ensures that only the following types can be
// assigned to DISubrangeField.
//
func (CountField) dISubrangeFieldNode()      {}
func (LowerBoundField) dISubrangeFieldNode() {}
func (StrideField) dISubrangeFieldNode()     {}
func (UpperBoundField) dISubrangeFieldNode() {}
func (NilNode) dISubrangeFieldNode()         {}

type DISubroutineTypeField interface {
	LlvmNode
	dISubroutineTypeFieldNode()
}

// dISubroutineTypeFieldNode() ensures that only the following types can be
// assigned to DISubroutineTypeField.
//
func (CCField) dISubroutineTypeFieldNode()    {}
func (FlagsField) dISubroutineTypeFieldNode() {}
func (TypesField) dISubroutineTypeFieldNode() {}
func (NilNode) dISubroutineTypeFieldNode()    {}

type DITemplateTypeParameterField interface {
	LlvmNode
	dITemplateTypeParameterFieldNode()
}

// dITemplateTypeParameterFieldNode() ensures that only the following types can be
// assigned to DITemplateTypeParameterField.
//
func (DefaultedField) dITemplateTypeParameterFieldNode() {}
func (NameField) dITemplateTypeParameterFieldNode()      {}
func (TypeField) dITemplateTypeParameterFieldNode()      {}
func (NilNode) dITemplateTypeParameterFieldNode()        {}

type DITemplateValueParameterField interface {
	LlvmNode
	dITemplateValueParameterFieldNode()
}

// dITemplateValueParameterFieldNode() ensures that only the following types can be
// assigned to DITemplateValueParameterField.
//
func (DefaultedField) dITemplateValueParameterFieldNode() {}
func (NameField) dITemplateValueParameterFieldNode()      {}
func (TagField) dITemplateValueParameterFieldNode()       {}
func (TypeField) dITemplateValueParameterFieldNode()      {}
func (ValueField) dITemplateValueParameterFieldNode()     {}
func (NilNode) dITemplateValueParameterFieldNode()        {}

type DwarfAttEncoding interface {
	LlvmNode
	dwarfAttEncodingNode()
}

// dwarfAttEncodingNode() ensures that only the following types can be
// assigned to DwarfAttEncoding.
//
func (DwarfAttEncodingEnum) dwarfAttEncodingNode() {}
func (NilNode) dwarfAttEncodingNode()              {}

type DwarfAttEncodingOrUint interface {
	LlvmNode
	dwarfAttEncodingOrUintNode()
}

// dwarfAttEncodingOrUintNode() ensures that only the following types can be
// assigned to DwarfAttEncodingOrUint.
//
func (DwarfAttEncodingEnum) dwarfAttEncodingOrUintNode() {}
func (DwarfAttEncodingInt) dwarfAttEncodingOrUintNode()  {}
func (NilNode) dwarfAttEncodingOrUintNode()              {}

type DwarfCC interface {
	LlvmNode
	dwarfCCNode()
}

// dwarfCCNode() ensures that only the following types can be
// assigned to DwarfCC.
//
func (DwarfCCEnum) dwarfCCNode() {}
func (DwarfCCInt) dwarfCCNode()  {}
func (NilNode) dwarfCCNode()     {}

type DwarfLang interface {
	LlvmNode
	dwarfLangNode()
}

// dwarfLangNode() ensures that only the following types can be
// assigned to DwarfLang.
//
func (DwarfLangEnum) dwarfLangNode() {}
func (DwarfLangInt) dwarfLangNode()  {}
func (NilNode) dwarfLangNode()       {}

type DwarfMacinfo interface {
	LlvmNode
	dwarfMacinfoNode()
}

// dwarfMacinfoNode() ensures that only the following types can be
// assigned to DwarfMacinfo.
//
func (DwarfMacinfoEnum) dwarfMacinfoNode() {}
func (DwarfMacinfoInt) dwarfMacinfoNode()  {}
func (NilNode) dwarfMacinfoNode()          {}

type DwarfTag interface {
	LlvmNode
	dwarfTagNode()
}

// dwarfTagNode() ensures that only the following types can be
// assigned to DwarfTag.
//
func (DwarfTagEnum) dwarfTagNode() {}
func (DwarfTagInt) dwarfTagNode()  {}
func (NilNode) dwarfTagNode()      {}

type DwarfVirtuality interface {
	LlvmNode
	dwarfVirtualityNode()
}

// dwarfVirtualityNode() ensures that only the following types can be
// assigned to DwarfVirtuality.
//
func (DwarfVirtualityEnum) dwarfVirtualityNode() {}
func (DwarfVirtualityInt) dwarfVirtualityNode()  {}
func (NilNode) dwarfVirtualityNode()             {}

type EmissionKind interface {
	LlvmNode
	emissionKindNode()
}

// emissionKindNode() ensures that only the following types can be
// assigned to EmissionKind.
//
func (EmissionKindEnum) emissionKindNode() {}
func (EmissionKindInt) emissionKindNode()  {}
func (NilNode) emissionKindNode()          {}

type ExceptionPad interface {
	LlvmNode
	exceptionPadNode()
}

// exceptionPadNode() ensures that only the following types can be
// assigned to ExceptionPad.
//
func (LocalIdent) exceptionPadNode() {}
func (NoneConst) exceptionPadNode()  {}
func (NilNode) exceptionPadNode()    {}

type FirstClassType interface {
	LlvmNode
	firstClassTypeNode()
}

// firstClassTypeNode() ensures that only the following types can be
// assigned to FirstClassType.
//
func (ArrayType) firstClassTypeNode()          {}
func (FloatType) firstClassTypeNode()          {}
func (IntType) firstClassTypeNode()            {}
func (LabelType) firstClassTypeNode()          {}
func (MMXType) firstClassTypeNode()            {}
func (MetadataType) firstClassTypeNode()       {}
func (NamedType) firstClassTypeNode()          {}
func (PackedStructType) firstClassTypeNode()   {}
func (PointerType) firstClassTypeNode()        {}
func (ScalableVectorType) firstClassTypeNode() {}
func (StructType) firstClassTypeNode()         {}
func (TokenType) firstClassTypeNode()          {}
func (VectorType) firstClassTypeNode()         {}
func (NilNode) firstClassTypeNode()            {}

type FuncAttribute interface {
	LlvmNode
	funcAttributeNode()
}

// funcAttributeNode() ensures that only the following types can be
// assigned to FuncAttribute.
//
func (AlignPair) funcAttributeNode()      {}
func (AlignStack) funcAttributeNode()     {}
func (AlignStackPair) funcAttributeNode() {}
func (AllocSize) funcAttributeNode()      {}
func (AttrGroupID) funcAttributeNode()    {}
func (AttrPair) funcAttributeNode()       {}
func (AttrString) funcAttributeNode()     {}
func (FuncAttr) funcAttributeNode()       {}
func (Preallocated) funcAttributeNode()   {}
func (NilNode) funcAttributeNode()        {}

type FuncHdrField interface {
	LlvmNode
	funcHdrFieldNode()
}

// funcHdrFieldNode() ensures that only the following types can be
// assigned to FuncHdrField.
//
func (Align) funcHdrFieldNode()          {}
func (AlignPair) funcHdrFieldNode()      {}
func (AlignStack) funcHdrFieldNode()     {}
func (AlignStackPair) funcHdrFieldNode() {}
func (AllocSize) funcHdrFieldNode()      {}
func (AttrGroupID) funcHdrFieldNode()    {}
func (AttrPair) funcHdrFieldNode()       {}
func (AttrString) funcHdrFieldNode()     {}
func (Comdat) funcHdrFieldNode()         {}
func (FuncAttr) funcHdrFieldNode()       {}
func (GCNode) funcHdrFieldNode()         {}
func (Partition) funcHdrFieldNode()      {}
func (Personality) funcHdrFieldNode()    {}
func (Preallocated) funcHdrFieldNode()   {}
func (Prefix) funcHdrFieldNode()         {}
func (Prologue) funcHdrFieldNode()       {}
func (Section) funcHdrFieldNode()        {}
func (NilNode) funcHdrFieldNode()        {}

type GenericDINodeField interface {
	LlvmNode
	genericDINodeFieldNode()
}

// genericDINodeFieldNode() ensures that only the following types can be
// assigned to GenericDINodeField.
//
func (HeaderField) genericDINodeFieldNode()   {}
func (OperandsField) genericDINodeFieldNode() {}
func (TagField) genericDINodeFieldNode()      {}
func (NilNode) genericDINodeFieldNode()       {}

type GlobalField interface {
	LlvmNode
	globalFieldNode()
}

// globalFieldNode() ensures that only the following types can be
// assigned to GlobalField.
//
func (Align) globalFieldNode()     {}
func (Comdat) globalFieldNode()    {}
func (Partition) globalFieldNode() {}
func (Section) globalFieldNode()   {}
func (NilNode) globalFieldNode()   {}

type IndirectSymbol interface {
	LlvmNode
	indirectSymbolNode()
}

// indirectSymbolNode() ensures that only the following types can be
// assigned to IndirectSymbol.
//
func (AddrSpaceCastExpr) indirectSymbolNode() {}
func (BitCastExpr) indirectSymbolNode()       {}
func (GetElementPtrExpr) indirectSymbolNode() {}
func (IntToPtrExpr) indirectSymbolNode()      {}
func (TypeConst) indirectSymbolNode()         {}
func (NilNode) indirectSymbolNode()           {}

type Instruction interface {
	LlvmNode
	instructionNode()
}

// instructionNode() ensures that only the following types can be
// assigned to Instruction.
//
func (AShrInst) instructionNode()           {}
func (AddInst) instructionNode()            {}
func (AddrSpaceCastInst) instructionNode()  {}
func (AllocaInst) instructionNode()         {}
func (AndInst) instructionNode()            {}
func (AtomicRMWInst) instructionNode()      {}
func (BitCastInst) instructionNode()        {}
func (CallInst) instructionNode()           {}
func (CatchPadInst) instructionNode()       {}
func (CleanupPadInst) instructionNode()     {}
func (CmpXchgInst) instructionNode()        {}
func (ExtractElementInst) instructionNode() {}
func (ExtractValueInst) instructionNode()   {}
func (FAddInst) instructionNode()           {}
func (FCmpInst) instructionNode()           {}
func (FDivInst) instructionNode()           {}
func (FMulInst) instructionNode()           {}
func (FNegInst) instructionNode()           {}
func (FPExtInst) instructionNode()          {}
func (FPToSIInst) instructionNode()         {}
func (FPToUIInst) instructionNode()         {}
func (FPTruncInst) instructionNode()        {}
func (FRemInst) instructionNode()           {}
func (FSubInst) instructionNode()           {}
func (FenceInst) instructionNode()          {}
func (FreezeInst) instructionNode()         {}
func (GetElementPtrInst) instructionNode()  {}
func (ICmpInst) instructionNode()           {}
func (InsertElementInst) instructionNode()  {}
func (InsertValueInst) instructionNode()    {}
func (IntToPtrInst) instructionNode()       {}
func (LShrInst) instructionNode()           {}
func (LandingPadInst) instructionNode()     {}
func (LoadInst) instructionNode()           {}
func (LocalDefInst) instructionNode()       {}
func (MulInst) instructionNode()            {}
func (OrInst) instructionNode()             {}
func (PhiInst) instructionNode()            {}
func (PtrToIntInst) instructionNode()       {}
func (SDivInst) instructionNode()           {}
func (SExtInst) instructionNode()           {}
func (SIToFPInst) instructionNode()         {}
func (SRemInst) instructionNode()           {}
func (SelectInst) instructionNode()         {}
func (ShlInst) instructionNode()            {}
func (ShuffleVectorInst) instructionNode()  {}
func (StoreInst) instructionNode()          {}
func (SubInst) instructionNode()            {}
func (TruncInst) instructionNode()          {}
func (UDivInst) instructionNode()           {}
func (UIToFPInst) instructionNode()         {}
func (URemInst) instructionNode()           {}
func (VAArgInst) instructionNode()          {}
func (XorInst) instructionNode()            {}
func (ZExtInst) instructionNode()           {}
func (NilNode) instructionNode()            {}

type MDField interface {
	LlvmNode
	mDFieldNode()
}

// mDFieldNode() ensures that only the following types can be
// assigned to MDField.
//
func (DIBasicType) mDFieldNode()                {}
func (DICommonBlock) mDFieldNode()              {}
func (DICompileUnit) mDFieldNode()              {}
func (DICompositeType) mDFieldNode()            {}
func (DIDerivedType) mDFieldNode()              {}
func (DIEnumerator) mDFieldNode()               {}
func (DIExpression) mDFieldNode()               {}
func (DIFile) mDFieldNode()                     {}
func (DIGlobalVariable) mDFieldNode()           {}
func (DIGlobalVariableExpression) mDFieldNode() {}
func (DIImportedEntity) mDFieldNode()           {}
func (DILabel) mDFieldNode()                    {}
func (DILexicalBlock) mDFieldNode()             {}
func (DILexicalBlockFile) mDFieldNode()         {}
func (DILocalVariable) mDFieldNode()            {}
func (DILocation) mDFieldNode()                 {}
func (DIMacro) mDFieldNode()                    {}
func (DIMacroFile) mDFieldNode()                {}
func (DIModule) mDFieldNode()                   {}
func (DINamespace) mDFieldNode()                {}
func (DIObjCProperty) mDFieldNode()             {}
func (DISubprogram) mDFieldNode()               {}
func (DISubrange) mDFieldNode()                 {}
func (DISubroutineType) mDFieldNode()           {}
func (DITemplateTypeParameter) mDFieldNode()    {}
func (DITemplateValueParameter) mDFieldNode()   {}
func (GenericDINode) mDFieldNode()              {}
func (MDString) mDFieldNode()                   {}
func (MDTuple) mDFieldNode()                    {}
func (MetadataID) mDFieldNode()                 {}
func (NullLit) mDFieldNode()                    {}
func (TypeValue) mDFieldNode()                  {}
func (NilNode) mDFieldNode()                    {}

type MDFieldOrInt interface {
	LlvmNode
	mDFieldOrIntNode()
}

// mDFieldOrIntNode() ensures that only the following types can be
// assigned to MDFieldOrInt.
//
func (DIBasicType) mDFieldOrIntNode()                {}
func (DICommonBlock) mDFieldOrIntNode()              {}
func (DICompileUnit) mDFieldOrIntNode()              {}
func (DICompositeType) mDFieldOrIntNode()            {}
func (DIDerivedType) mDFieldOrIntNode()              {}
func (DIEnumerator) mDFieldOrIntNode()               {}
func (DIExpression) mDFieldOrIntNode()               {}
func (DIFile) mDFieldOrIntNode()                     {}
func (DIGlobalVariable) mDFieldOrIntNode()           {}
func (DIGlobalVariableExpression) mDFieldOrIntNode() {}
func (DIImportedEntity) mDFieldOrIntNode()           {}
func (DILabel) mDFieldOrIntNode()                    {}
func (DILexicalBlock) mDFieldOrIntNode()             {}
func (DILexicalBlockFile) mDFieldOrIntNode()         {}
func (DILocalVariable) mDFieldOrIntNode()            {}
func (DILocation) mDFieldOrIntNode()                 {}
func (DIMacro) mDFieldOrIntNode()                    {}
func (DIMacroFile) mDFieldOrIntNode()                {}
func (DIModule) mDFieldOrIntNode()                   {}
func (DINamespace) mDFieldOrIntNode()                {}
func (DIObjCProperty) mDFieldOrIntNode()             {}
func (DISubprogram) mDFieldOrIntNode()               {}
func (DISubrange) mDFieldOrIntNode()                 {}
func (DISubroutineType) mDFieldOrIntNode()           {}
func (DITemplateTypeParameter) mDFieldOrIntNode()    {}
func (DITemplateValueParameter) mDFieldOrIntNode()   {}
func (GenericDINode) mDFieldOrIntNode()              {}
func (IntLit) mDFieldOrIntNode()                     {}
func (MDString) mDFieldOrIntNode()                   {}
func (MDTuple) mDFieldOrIntNode()                    {}
func (MetadataID) mDFieldOrIntNode()                 {}
func (NullLit) mDFieldOrIntNode()                    {}
func (TypeValue) mDFieldOrIntNode()                  {}
func (NilNode) mDFieldOrIntNode()                    {}

type MDNode interface {
	LlvmNode
	mDNodeNode()
}

// mDNodeNode() ensures that only the following types can be
// assigned to MDNode.
//
func (DIBasicType) mDNodeNode()                {}
func (DICommonBlock) mDNodeNode()              {}
func (DICompileUnit) mDNodeNode()              {}
func (DICompositeType) mDNodeNode()            {}
func (DIDerivedType) mDNodeNode()              {}
func (DIEnumerator) mDNodeNode()               {}
func (DIExpression) mDNodeNode()               {}
func (DIFile) mDNodeNode()                     {}
func (DIGlobalVariable) mDNodeNode()           {}
func (DIGlobalVariableExpression) mDNodeNode() {}
func (DIImportedEntity) mDNodeNode()           {}
func (DILabel) mDNodeNode()                    {}
func (DILexicalBlock) mDNodeNode()             {}
func (DILexicalBlockFile) mDNodeNode()         {}
func (DILocalVariable) mDNodeNode()            {}
func (DILocation) mDNodeNode()                 {}
func (DIMacro) mDNodeNode()                    {}
func (DIMacroFile) mDNodeNode()                {}
func (DIModule) mDNodeNode()                   {}
func (DINamespace) mDNodeNode()                {}
func (DIObjCProperty) mDNodeNode()             {}
func (DISubprogram) mDNodeNode()               {}
func (DISubrange) mDNodeNode()                 {}
func (DISubroutineType) mDNodeNode()           {}
func (DITemplateTypeParameter) mDNodeNode()    {}
func (DITemplateValueParameter) mDNodeNode()   {}
func (GenericDINode) mDNodeNode()              {}
func (MDTuple) mDNodeNode()                    {}
func (MetadataID) mDNodeNode()                 {}
func (NilNode) mDNodeNode()                    {}

type Metadata interface {
	LlvmNode
	metadataNode()
}

// metadataNode() ensures that only the following types can be
// assigned to Metadata.
//
func (DIBasicType) metadataNode()                {}
func (DICommonBlock) metadataNode()              {}
func (DICompileUnit) metadataNode()              {}
func (DICompositeType) metadataNode()            {}
func (DIDerivedType) metadataNode()              {}
func (DIEnumerator) metadataNode()               {}
func (DIExpression) metadataNode()               {}
func (DIFile) metadataNode()                     {}
func (DIGlobalVariable) metadataNode()           {}
func (DIGlobalVariableExpression) metadataNode() {}
func (DIImportedEntity) metadataNode()           {}
func (DILabel) metadataNode()                    {}
func (DILexicalBlock) metadataNode()             {}
func (DILexicalBlockFile) metadataNode()         {}
func (DILocalVariable) metadataNode()            {}
func (DILocation) metadataNode()                 {}
func (DIMacro) metadataNode()                    {}
func (DIMacroFile) metadataNode()                {}
func (DIModule) metadataNode()                   {}
func (DINamespace) metadataNode()                {}
func (DIObjCProperty) metadataNode()             {}
func (DISubprogram) metadataNode()               {}
func (DISubrange) metadataNode()                 {}
func (DISubroutineType) metadataNode()           {}
func (DITemplateTypeParameter) metadataNode()    {}
func (DITemplateValueParameter) metadataNode()   {}
func (GenericDINode) metadataNode()              {}
func (MDString) metadataNode()                   {}
func (MDTuple) metadataNode()                    {}
func (MetadataID) metadataNode()                 {}
func (TypeValue) metadataNode()                  {}
func (NilNode) metadataNode()                    {}

type MetadataNode interface {
	LlvmNode
	metadataNodeNode()
}

// metadataNodeNode() ensures that only the following types can be
// assigned to MetadataNode.
//
func (DIExpression) metadataNodeNode() {}
func (MetadataID) metadataNodeNode()   {}
func (NilNode) metadataNodeNode()      {}

type NameTableKind interface {
	LlvmNode
	nameTableKindNode()
}

// nameTableKindNode() ensures that only the following types can be
// assigned to NameTableKind.
//
func (NameTableKindEnum) nameTableKindNode() {}
func (NameTableKindInt) nameTableKindNode()  {}
func (NilNode) nameTableKindNode()           {}

type ParamAttribute interface {
	LlvmNode
	paramAttributeNode()
}

// paramAttributeNode() ensures that only the following types can be
// assigned to ParamAttribute.
//
func (Align) paramAttributeNode()                 {}
func (AttrPair) paramAttributeNode()              {}
func (AttrString) paramAttributeNode()            {}
func (ByRefAttr) paramAttributeNode()             {}
func (Byval) paramAttributeNode()                 {}
func (Dereferenceable) paramAttributeNode()       {}
func (DereferenceableOrNull) paramAttributeNode() {}
func (ParamAttr) paramAttributeNode()             {}
func (Preallocated) paramAttributeNode()          {}
func (StructRetAttr) paramAttributeNode()         {}
func (NilNode) paramAttributeNode()               {}

type ReturnAttribute interface {
	LlvmNode
	returnAttributeNode()
}

// returnAttributeNode() ensures that only the following types can be
// assigned to ReturnAttribute.
//
func (Dereferenceable) returnAttributeNode()       {}
func (DereferenceableOrNull) returnAttributeNode() {}
func (ReturnAttr) returnAttributeNode()            {}
func (NilNode) returnAttributeNode()               {}

type SpecializedMDNode interface {
	LlvmNode
	specializedMDNodeNode()
}

// specializedMDNodeNode() ensures that only the following types can be
// assigned to SpecializedMDNode.
//
func (DIBasicType) specializedMDNodeNode()                {}
func (DICommonBlock) specializedMDNodeNode()              {}
func (DICompileUnit) specializedMDNodeNode()              {}
func (DICompositeType) specializedMDNodeNode()            {}
func (DIDerivedType) specializedMDNodeNode()              {}
func (DIEnumerator) specializedMDNodeNode()               {}
func (DIExpression) specializedMDNodeNode()               {}
func (DIFile) specializedMDNodeNode()                     {}
func (DIGlobalVariable) specializedMDNodeNode()           {}
func (DIGlobalVariableExpression) specializedMDNodeNode() {}
func (DIImportedEntity) specializedMDNodeNode()           {}
func (DILabel) specializedMDNodeNode()                    {}
func (DILexicalBlock) specializedMDNodeNode()             {}
func (DILexicalBlockFile) specializedMDNodeNode()         {}
func (DILocalVariable) specializedMDNodeNode()            {}
func (DILocation) specializedMDNodeNode()                 {}
func (DIMacro) specializedMDNodeNode()                    {}
func (DIMacroFile) specializedMDNodeNode()                {}
func (DIModule) specializedMDNodeNode()                   {}
func (DINamespace) specializedMDNodeNode()                {}
func (DIObjCProperty) specializedMDNodeNode()             {}
func (DISubprogram) specializedMDNodeNode()               {}
func (DISubrange) specializedMDNodeNode()                 {}
func (DISubroutineType) specializedMDNodeNode()           {}
func (DITemplateTypeParameter) specializedMDNodeNode()    {}
func (DITemplateValueParameter) specializedMDNodeNode()   {}
func (GenericDINode) specializedMDNodeNode()              {}
func (NilNode) specializedMDNodeNode()                    {}

type TargetDef interface {
	LlvmNode
	targetDefNode()
}

// targetDefNode() ensures that only the following types can be
// assigned to TargetDef.
//
func (SourceFilename) targetDefNode()   {}
func (TargetDataLayout) targetDefNode() {}
func (TargetTriple) targetDefNode()     {}
func (NilNode) targetDefNode()          {}

type Terminator interface {
	LlvmNode
	terminatorNode()
}

// terminatorNode() ensures that only the following types can be
// assigned to Terminator.
//
func (BrTerm) terminatorNode()          {}
func (CallBrTerm) terminatorNode()      {}
func (CatchRetTerm) terminatorNode()    {}
func (CatchSwitchTerm) terminatorNode() {}
func (CleanupRetTerm) terminatorNode()  {}
func (CondBrTerm) terminatorNode()      {}
func (IndirectBrTerm) terminatorNode()  {}
func (InvokeTerm) terminatorNode()      {}
func (LocalDefTerm) terminatorNode()    {}
func (ResumeTerm) terminatorNode()      {}
func (RetTerm) terminatorNode()         {}
func (SwitchTerm) terminatorNode()      {}
func (UnreachableTerm) terminatorNode() {}
func (NilNode) terminatorNode()         {}

type TopLevelEntity interface {
	LlvmNode
	topLevelEntityNode()
}

// topLevelEntityNode() ensures that only the following types can be
// assigned to TopLevelEntity.
//
func (AttrGroupDef) topLevelEntityNode()      {}
func (ComdatDef) topLevelEntityNode()         {}
func (FuncDecl) topLevelEntityNode()          {}
func (FuncDef) topLevelEntityNode()           {}
func (GlobalDecl) topLevelEntityNode()        {}
func (IndirectSymbolDef) topLevelEntityNode() {}
func (MetadataDef) topLevelEntityNode()       {}
func (ModuleAsm) topLevelEntityNode()         {}
func (NamedMetadataDef) topLevelEntityNode()  {}
func (TypeDef) topLevelEntityNode()           {}
func (UseListOrder) topLevelEntityNode()      {}
func (UseListOrderBB) topLevelEntityNode()    {}
func (NilNode) topLevelEntityNode()           {}

type Type interface {
	LlvmNode
	typeNode()
}

// typeNode() ensures that only the following types can be
// assigned to Type.
//
func (ArrayType) typeNode()          {}
func (FloatType) typeNode()          {}
func (FuncType) typeNode()           {}
func (IntType) typeNode()            {}
func (LabelType) typeNode()          {}
func (MMXType) typeNode()            {}
func (MetadataType) typeNode()       {}
func (NamedType) typeNode()          {}
func (PackedStructType) typeNode()   {}
func (PointerType) typeNode()        {}
func (ScalableVectorType) typeNode() {}
func (StructType) typeNode()         {}
func (TokenType) typeNode()          {}
func (VectorType) typeNode()         {}
func (VoidType) typeNode()           {}
func (NilNode) typeNode()            {}

type UnwindTarget interface {
	LlvmNode
	unwindTargetNode()
}

// unwindTargetNode() ensures that only the following types can be
// assigned to UnwindTarget.
//
func (Label) unwindTargetNode()          {}
func (UnwindToCaller) unwindTargetNode() {}
func (NilNode) unwindTargetNode()        {}

type Value interface {
	LlvmNode
	valueNode()
}

// valueNode() ensures that only the following types can be
// assigned to Value.
//
func (AShrExpr) valueNode()             {}
func (AddExpr) valueNode()              {}
func (AddrSpaceCastExpr) valueNode()    {}
func (AndExpr) valueNode()              {}
func (ArrayConst) valueNode()           {}
func (BitCastExpr) valueNode()          {}
func (BlockAddressConst) valueNode()    {}
func (BoolConst) valueNode()            {}
func (CharArrayConst) valueNode()       {}
func (ExtractElementExpr) valueNode()   {}
func (ExtractValueExpr) valueNode()     {}
func (FAddExpr) valueNode()             {}
func (FCmpExpr) valueNode()             {}
func (FDivExpr) valueNode()             {}
func (FMulExpr) valueNode()             {}
func (FNegExpr) valueNode()             {}
func (FPExtExpr) valueNode()            {}
func (FPToSIExpr) valueNode()           {}
func (FPToUIExpr) valueNode()           {}
func (FPTruncExpr) valueNode()          {}
func (FRemExpr) valueNode()             {}
func (FSubExpr) valueNode()             {}
func (FloatConst) valueNode()           {}
func (GetElementPtrExpr) valueNode()    {}
func (GlobalIdent) valueNode()          {}
func (ICmpExpr) valueNode()             {}
func (InlineAsm) valueNode()            {}
func (InsertElementExpr) valueNode()    {}
func (InsertValueExpr) valueNode()      {}
func (IntConst) valueNode()             {}
func (IntToPtrExpr) valueNode()         {}
func (LShrExpr) valueNode()             {}
func (LocalIdent) valueNode()           {}
func (MulExpr) valueNode()              {}
func (NoneConst) valueNode()            {}
func (NullConst) valueNode()            {}
func (OrExpr) valueNode()               {}
func (PtrToIntExpr) valueNode()         {}
func (SDivExpr) valueNode()             {}
func (SExtExpr) valueNode()             {}
func (SIToFPExpr) valueNode()           {}
func (SRemExpr) valueNode()             {}
func (SelectExpr) valueNode()           {}
func (ShlExpr) valueNode()              {}
func (ShuffleVectorExpr) valueNode()    {}
func (StructConst) valueNode()          {}
func (SubExpr) valueNode()              {}
func (TruncExpr) valueNode()            {}
func (UDivExpr) valueNode()             {}
func (UIToFPExpr) valueNode()           {}
func (URemExpr) valueNode()             {}
func (UndefConst) valueNode()           {}
func (VectorConst) valueNode()          {}
func (XorExpr) valueNode()              {}
func (ZExtExpr) valueNode()             {}
func (ZeroInitializerConst) valueNode() {}
func (NilNode) valueNode()              {}

type ValueInstruction interface {
	LlvmNode
	valueInstructionNode()
}

// valueInstructionNode() ensures that only the following types can be
// assigned to ValueInstruction.
//
func (AShrInst) valueInstructionNode()           {}
func (AddInst) valueInstructionNode()            {}
func (AddrSpaceCastInst) valueInstructionNode()  {}
func (AllocaInst) valueInstructionNode()         {}
func (AndInst) valueInstructionNode()            {}
func (AtomicRMWInst) valueInstructionNode()      {}
func (BitCastInst) valueInstructionNode()        {}
func (CallInst) valueInstructionNode()           {}
func (CatchPadInst) valueInstructionNode()       {}
func (CleanupPadInst) valueInstructionNode()     {}
func (CmpXchgInst) valueInstructionNode()        {}
func (ExtractElementInst) valueInstructionNode() {}
func (ExtractValueInst) valueInstructionNode()   {}
func (FAddInst) valueInstructionNode()           {}
func (FCmpInst) valueInstructionNode()           {}
func (FDivInst) valueInstructionNode()           {}
func (FMulInst) valueInstructionNode()           {}
func (FNegInst) valueInstructionNode()           {}
func (FPExtInst) valueInstructionNode()          {}
func (FPToSIInst) valueInstructionNode()         {}
func (FPToUIInst) valueInstructionNode()         {}
func (FPTruncInst) valueInstructionNode()        {}
func (FRemInst) valueInstructionNode()           {}
func (FSubInst) valueInstructionNode()           {}
func (FreezeInst) valueInstructionNode()         {}
func (GetElementPtrInst) valueInstructionNode()  {}
func (ICmpInst) valueInstructionNode()           {}
func (InsertElementInst) valueInstructionNode()  {}
func (InsertValueInst) valueInstructionNode()    {}
func (IntToPtrInst) valueInstructionNode()       {}
func (LShrInst) valueInstructionNode()           {}
func (LandingPadInst) valueInstructionNode()     {}
func (LoadInst) valueInstructionNode()           {}
func (MulInst) valueInstructionNode()            {}
func (OrInst) valueInstructionNode()             {}
func (PhiInst) valueInstructionNode()            {}
func (PtrToIntInst) valueInstructionNode()       {}
func (SDivInst) valueInstructionNode()           {}
func (SExtInst) valueInstructionNode()           {}
func (SIToFPInst) valueInstructionNode()         {}
func (SRemInst) valueInstructionNode()           {}
func (SelectInst) valueInstructionNode()         {}
func (ShlInst) valueInstructionNode()            {}
func (ShuffleVectorInst) valueInstructionNode()  {}
func (SubInst) valueInstructionNode()            {}
func (TruncInst) valueInstructionNode()          {}
func (UDivInst) valueInstructionNode()           {}
func (UIToFPInst) valueInstructionNode()         {}
func (URemInst) valueInstructionNode()           {}
func (VAArgInst) valueInstructionNode()          {}
func (XorInst) valueInstructionNode()            {}
func (ZExtInst) valueInstructionNode()           {}
func (NilNode) valueInstructionNode()            {}

type ValueTerminator interface {
	LlvmNode
	valueTerminatorNode()
}

// valueTerminatorNode() ensures that only the following types can be
// assigned to ValueTerminator.
//
func (CallBrTerm) valueTerminatorNode()      {}
func (CatchSwitchTerm) valueTerminatorNode() {}
func (InvokeTerm) valueTerminatorNode()      {}
func (NilNode) valueTerminatorNode()         {}

// Types.

type APINotesField struct {
	*Node
}

func (n APINotesField) APINotes() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type AShrExpr struct {
	*Node
}

func (n AShrExpr) Exact() (Exact, bool) {
	field := Exact{n.Child(selector.Exact)}
	return field, field.IsValid()
}

func (n AShrExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n AShrExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type AShrInst struct {
	*Node
}

func (n AShrInst) Exact() (Exact, bool) {
	field := Exact{n.Child(selector.Exact)}
	return field, field.IsValid()
}

func (n AShrInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n AShrInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n AShrInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type AddExpr struct {
	*Node
}

func (n AddExpr) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var ret = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, OverflowFlag{node})
	}
	return ret
}

func (n AddExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n AddExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type AddInst struct {
	*Node
}

func (n AddInst) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var ret = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, OverflowFlag{node})
	}
	return ret
}

func (n AddInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n AddInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n AddInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type AddrSpace struct {
	*Node
}

func (n AddrSpace) N() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type AddrSpaceCastExpr struct {
	*Node
}

func (n AddrSpaceCastExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n AddrSpaceCastExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type AddrSpaceCastInst struct {
	*Node
}

func (n AddrSpaceCastInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n AddrSpaceCastInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n AddrSpaceCastInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type Align struct {
	*Node
}

func (n Align) N() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type AlignField struct {
	*Node
}

func (n AlignField) Align() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type AlignPair struct {
	*Node
}

func (n AlignPair) N() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type AlignStack struct {
	*Node
}

func (n AlignStack) N() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type AlignStackPair struct {
	*Node
}

func (n AlignStackPair) N() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type AlignStackTok struct {
	*Node
}

type AllocSize struct {
	*Node
}

func (n AllocSize) ElemSizeIndex() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

func (n AllocSize) NElemsIndex() (UintLit, bool) {
	field := UintLit{n.Child(selector.UintLit).Next(selector.UintLit)}
	return field, field.IsValid()
}

type AllocaInst struct {
	*Node
}

func (n AllocaInst) InAlloca() (InAlloca, bool) {
	field := InAlloca{n.Child(selector.InAlloca)}
	return field, field.IsValid()
}

func (n AllocaInst) SwiftError() (SwiftError, bool) {
	field := SwiftError{n.Child(selector.SwiftError)}
	return field, field.IsValid()
}

func (n AllocaInst) ElemType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n AllocaInst) NElems() (TypeValue, bool) {
	field := TypeValue{n.Child(selector.TypeValue)}
	return field, field.IsValid()
}

func (n AllocaInst) Align() (Align, bool) {
	field := Align{n.Child(selector.Align)}
	return field, field.IsValid()
}

func (n AllocaInst) AddrSpace() (AddrSpace, bool) {
	field := AddrSpace{n.Child(selector.AddrSpace)}
	return field, field.IsValid()
}

func (n AllocaInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type AndExpr struct {
	*Node
}

func (n AndExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n AndExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type AndInst struct {
	*Node
}

func (n AndInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n AndInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n AndInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type Arg struct {
	*Node
}

func (n Arg) Typ() LlvmNode {
	return ToLlvmNode(n.Child(selector.OneOf(ll.ArrayType, ll.FloatType, ll.IntType, ll.LabelType, ll.MMXType, ll.MetadataType, ll.NamedType, ll.PackedStructType, ll.PointerType, ll.ScalableVectorType, ll.StructType, ll.TokenType, ll.VectorType))).(LlvmNode)
}

func (n Arg) Attrs() []ParamAttribute {
	nodes := n.Children(selector.ParamAttribute)
	var ret = make([]ParamAttribute, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(ParamAttribute))
	}
	return ret
}

func (n Arg) Val() LlvmNode {
	return ToLlvmNode(n.Child(selector.OneOf(ll.AShrExpr, ll.AddExpr, ll.AddrSpaceCastExpr, ll.AndExpr, ll.ArrayConst, ll.BitCastExpr, ll.BlockAddressConst, ll.BoolConst, ll.CharArrayConst, ll.DIBasicType, ll.DICommonBlock, ll.DICompileUnit, ll.DICompositeType, ll.DIDerivedType, ll.DIEnumerator, ll.DIExpression, ll.DIFile, ll.DIGlobalVariable, ll.DIGlobalVariableExpression, ll.DIImportedEntity, ll.DILabel, ll.DILexicalBlock, ll.DILexicalBlockFile, ll.DILocalVariable, ll.DILocation, ll.DIMacro, ll.DIMacroFile, ll.DIModule, ll.DINamespace, ll.DIObjCProperty, ll.DISubprogram, ll.DISubrange, ll.DISubroutineType, ll.DITemplateTypeParameter, ll.DITemplateValueParameter, ll.ExtractElementExpr, ll.ExtractValueExpr, ll.FAddExpr, ll.FCmpExpr, ll.FDivExpr, ll.FMulExpr, ll.FNegExpr, ll.FPExtExpr, ll.FPToSIExpr, ll.FPToUIExpr, ll.FPTruncExpr, ll.FRemExpr, ll.FSubExpr, ll.FloatConst, ll.GenericDINode, ll.GetElementPtrExpr, ll.GlobalIdent, ll.ICmpExpr, ll.InlineAsm, ll.InsertElementExpr, ll.InsertValueExpr, ll.IntConst, ll.IntToPtrExpr, ll.LShrExpr, ll.LocalIdent, ll.MDString, ll.MDTuple, ll.MetadataID, ll.MulExpr, ll.NoneConst, ll.NullConst, ll.OrExpr, ll.PtrToIntExpr, ll.SDivExpr, ll.SExtExpr, ll.SIToFPExpr, ll.SRemExpr, ll.SelectExpr, ll.ShlExpr, ll.ShuffleVectorExpr, ll.StructConst, ll.SubExpr, ll.TruncExpr, ll.TypeValue, ll.UDivExpr, ll.UIToFPExpr, ll.URemExpr, ll.UndefConst, ll.VectorConst, ll.XorExpr, ll.ZExtExpr, ll.ZeroInitializerConst))).(LlvmNode)
}

type ArgField struct {
	*Node
}

func (n ArgField) Arg() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type Args struct {
	*Node
}

func (n Args) Args() []Arg {
	nodes := n.Children(selector.Arg)
	var ret = make([]Arg, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, Arg{node})
	}
	return ret
}

type ArrayConst struct {
	*Node
}

func (n ArrayConst) Elems() []TypeConst {
	nodes := n.Children(selector.TypeConst)
	var ret = make([]TypeConst, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, TypeConst{node})
	}
	return ret
}

type ArrayType struct {
	*Node
}

func (n ArrayType) Len() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

func (n ArrayType) Elem() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type Atomic struct {
	*Node
}

type AtomicOp struct {
	*Node
}

type AtomicOrdering struct {
	*Node
}

type AtomicRMWInst struct {
	*Node
}

func (n AtomicRMWInst) Volatile() (Volatile, bool) {
	field := Volatile{n.Child(selector.Volatile)}
	return field, field.IsValid()
}

func (n AtomicRMWInst) Op() AtomicOp {
	return AtomicOp{n.Child(selector.AtomicOp)}
}

func (n AtomicRMWInst) Dst() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n AtomicRMWInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n AtomicRMWInst) SyncScope() (SyncScope, bool) {
	field := SyncScope{n.Child(selector.SyncScope)}
	return field, field.IsValid()
}

func (n AtomicRMWInst) Ordering() AtomicOrdering {
	return AtomicOrdering{n.Child(selector.AtomicOrdering)}
}

func (n AtomicRMWInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type AttrGroupDef struct {
	*Node
}

func (n AttrGroupDef) ID() AttrGroupID {
	return AttrGroupID{n.Child(selector.AttrGroupID)}
}

func (n AttrGroupDef) FuncAttrs() []FuncAttribute {
	nodes := n.Child(selector.AttrGroupID).NextAll(selector.FuncAttribute)
	var ret = make([]FuncAttribute, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(FuncAttribute))
	}
	return ret
}

type AttrGroupID struct {
	*Node
}

type AttrPair struct {
	*Node
}

func (n AttrPair) Key() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

func (n AttrPair) Val() StringLit {
	return StringLit{n.Child(selector.StringLit).Next(selector.StringLit)}
}

type AttrString struct {
	*Node
}

func (n AttrString) Val() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type AttributesField struct {
	*Node
}

func (n AttributesField) Attributes() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type BaseTypeField struct {
	*Node
}

func (n BaseTypeField) BaseType() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type BasicBlock struct {
	*Node
}

func (n BasicBlock) Name() (LabelIdent, bool) {
	field := LabelIdent{n.Child(selector.LabelIdent)}
	return field, field.IsValid()
}

func (n BasicBlock) Insts() []Instruction {
	nodes := n.Children(selector.Instruction)
	var ret = make([]Instruction, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(Instruction))
	}
	return ret
}

func (n BasicBlock) Term() Terminator {
	return ToLlvmNode(n.Child(selector.Terminator)).(Terminator)
}

type BitCastExpr struct {
	*Node
}

func (n BitCastExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n BitCastExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type BitCastInst struct {
	*Node
}

func (n BitCastInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n BitCastInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n BitCastInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type BlockAddressConst struct {
	*Node
}

func (n BlockAddressConst) Func() GlobalIdent {
	return GlobalIdent{n.Child(selector.GlobalIdent)}
}

func (n BlockAddressConst) Block() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

type BoolConst struct {
	*Node
}

func (n BoolConst) BoolLit() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type BoolLit struct {
	*Node
}

type BrTerm struct {
	*Node
}

func (n BrTerm) Target() Label {
	return Label{n.Child(selector.Label)}
}

func (n BrTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type ByRefAttr struct {
	*Node
}

func (n ByRefAttr) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type Byval struct {
	*Node
}

func (n Byval) Typ() (Type, bool) {
	field := ToLlvmNode(n.Child(selector.Type)).(Type)
	return field, field.LlvmNode() != nil
}

type CCField struct {
	*Node
}

func (n CCField) CC() DwarfCC {
	return ToLlvmNode(n.Child(selector.DwarfCC)).(DwarfCC)
}

type CallBrTerm struct {
	*Node
}

func (n CallBrTerm) CallingConv() (CallingConv, bool) {
	field := ToLlvmNode(n.Child(selector.CallingConv)).(CallingConv)
	return field, field.LlvmNode() != nil
}

func (n CallBrTerm) ReturnAttrs() []ReturnAttribute {
	nodes := n.Children(selector.ReturnAttribute)
	var ret = make([]ReturnAttribute, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(ReturnAttribute))
	}
	return ret
}

func (n CallBrTerm) AddrSpace() (AddrSpace, bool) {
	field := AddrSpace{n.Child(selector.AddrSpace)}
	return field, field.IsValid()
}

func (n CallBrTerm) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n CallBrTerm) Callee() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n CallBrTerm) Args() Args {
	return Args{n.Child(selector.Args)}
}

func (n CallBrTerm) FuncAttrs() []FuncAttribute {
	nodes := n.Children(selector.FuncAttribute)
	var ret = make([]FuncAttribute, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(FuncAttribute))
	}
	return ret
}

func (n CallBrTerm) OperandBundles() []OperandBundle {
	nodes := n.Children(selector.OperandBundle)
	var ret = make([]OperandBundle, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, OperandBundle{node})
	}
	return ret
}

func (n CallBrTerm) NormalRetTarget() Label {
	return Label{n.Child(selector.Label)}
}

func (n CallBrTerm) OtherRetTargets() []Label {
	nodes := n.Child(selector.Label).NextAll(selector.Label)
	var ret = make([]Label, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, Label{node})
	}
	return ret
}

func (n CallBrTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type CallInst struct {
	*Node
}

func (n CallInst) Tail() (Tail, bool) {
	field := Tail{n.Child(selector.Tail)}
	return field, field.IsValid()
}

func (n CallInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var ret = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, FastMathFlag{node})
	}
	return ret
}

func (n CallInst) CallingConv() (CallingConv, bool) {
	field := ToLlvmNode(n.Child(selector.CallingConv)).(CallingConv)
	return field, field.LlvmNode() != nil
}

func (n CallInst) ReturnAttrs() []ReturnAttribute {
	nodes := n.Children(selector.ReturnAttribute)
	var ret = make([]ReturnAttribute, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(ReturnAttribute))
	}
	return ret
}

func (n CallInst) AddrSpace() (AddrSpace, bool) {
	field := AddrSpace{n.Child(selector.AddrSpace)}
	return field, field.IsValid()
}

func (n CallInst) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n CallInst) Callee() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n CallInst) Args() Args {
	return Args{n.Child(selector.Args)}
}

func (n CallInst) FuncAttrs() []FuncAttribute {
	nodes := n.Children(selector.FuncAttribute)
	var ret = make([]FuncAttribute, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(FuncAttribute))
	}
	return ret
}

func (n CallInst) OperandBundles() []OperandBundle {
	nodes := n.Children(selector.OperandBundle)
	var ret = make([]OperandBundle, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, OperandBundle{node})
	}
	return ret
}

func (n CallInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type CallingConvEnum struct {
	*Node
}

type CallingConvInt struct {
	*Node
}

func (n CallingConvInt) UintLit() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type Case struct {
	*Node
}

func (n Case) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n Case) Target() Label {
	return Label{n.Child(selector.Label)}
}

type CatchPadInst struct {
	*Node
}

func (n CatchPadInst) CatchSwitch() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

func (n CatchPadInst) Args() []ExceptionArg {
	nodes := n.Children(selector.ExceptionArg)
	var ret = make([]ExceptionArg, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ExceptionArg{node})
	}
	return ret
}

func (n CatchPadInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type CatchRetTerm struct {
	*Node
}

func (n CatchRetTerm) CatchPad() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n CatchRetTerm) Target() Label {
	return Label{n.Child(selector.Label)}
}

func (n CatchRetTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type CatchSwitchTerm struct {
	*Node
}

func (n CatchSwitchTerm) ParentPad() ExceptionPad {
	return ToLlvmNode(n.Child(selector.ExceptionPad)).(ExceptionPad)
}

func (n CatchSwitchTerm) Handlers() Handlers {
	return Handlers{n.Child(selector.Handlers)}
}

func (n CatchSwitchTerm) DefaultUnwindTarget() UnwindTarget {
	return ToLlvmNode(n.Child(selector.UnwindTarget)).(UnwindTarget)
}

func (n CatchSwitchTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type CharArrayConst struct {
	*Node
}

func (n CharArrayConst) Val() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type ChecksumField struct {
	*Node
}

func (n ChecksumField) Checksum() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type ChecksumKind struct {
	*Node
}

type ChecksumkindField struct {
	*Node
}

func (n ChecksumkindField) Checksumkind() ChecksumKind {
	return ChecksumKind{n.Child(selector.ChecksumKind)}
}

type Clause struct {
	*Node
}

func (n Clause) ClauseType() ClauseType {
	return ClauseType{n.Child(selector.ClauseType)}
}

func (n Clause) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

type ClauseType struct {
	*Node
}

type Cleanup struct {
	*Node
}

type CleanupPadInst struct {
	*Node
}

func (n CleanupPadInst) ParentPad() ExceptionPad {
	return ToLlvmNode(n.Child(selector.ExceptionPad)).(ExceptionPad)
}

func (n CleanupPadInst) Args() []ExceptionArg {
	nodes := n.Children(selector.ExceptionArg)
	var ret = make([]ExceptionArg, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ExceptionArg{node})
	}
	return ret
}

func (n CleanupPadInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type CleanupRetTerm struct {
	*Node
}

func (n CleanupRetTerm) CleanupPad() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n CleanupRetTerm) UnwindTarget() UnwindTarget {
	return ToLlvmNode(n.Child(selector.UnwindTarget)).(UnwindTarget)
}

func (n CleanupRetTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type CmpXchgInst struct {
	*Node
}

func (n CmpXchgInst) Weak() (Weak, bool) {
	field := Weak{n.Child(selector.Weak)}
	return field, field.IsValid()
}

func (n CmpXchgInst) Volatile() (Volatile, bool) {
	field := Volatile{n.Child(selector.Volatile)}
	return field, field.IsValid()
}

func (n CmpXchgInst) Ptr() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n CmpXchgInst) Cmp() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n CmpXchgInst) New() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue).Next(selector.TypeValue)}
}

func (n CmpXchgInst) SyncScope() (SyncScope, bool) {
	field := SyncScope{n.Child(selector.SyncScope)}
	return field, field.IsValid()
}

func (n CmpXchgInst) SuccessOrdering() AtomicOrdering {
	return AtomicOrdering{n.Child(selector.AtomicOrdering)}
}

func (n CmpXchgInst) FailureOrdering() AtomicOrdering {
	return AtomicOrdering{n.Child(selector.AtomicOrdering).Next(selector.AtomicOrdering)}
}

func (n CmpXchgInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type ColumnField struct {
	*Node
}

func (n ColumnField) Column() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type Comdat struct {
	*Node
}

func (n Comdat) Name() (ComdatName, bool) {
	field := ComdatName{n.Child(selector.ComdatName)}
	return field, field.IsValid()
}

type ComdatDef struct {
	*Node
}

func (n ComdatDef) Name() ComdatName {
	return ComdatName{n.Child(selector.ComdatName)}
}

func (n ComdatDef) Kind() SelectionKind {
	return SelectionKind{n.Child(selector.SelectionKind)}
}

type ComdatName struct {
	*Node
}

type CondBrTerm struct {
	*Node
}

func (n CondBrTerm) CondTyp() IntType {
	return IntType{n.Child(selector.IntType)}
}

func (n CondBrTerm) Cond() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n CondBrTerm) TargetTrue() Label {
	return Label{n.Child(selector.Label)}
}

func (n CondBrTerm) TargetFalse() Label {
	return Label{n.Child(selector.Label).Next(selector.Label)}
}

func (n CondBrTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type ConfigMacrosField struct {
	*Node
}

func (n ConfigMacrosField) ConfigMacros() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type ContainingTypeField struct {
	*Node
}

func (n ContainingTypeField) ContainingType() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type CountField struct {
	*Node
}

func (n CountField) Count() MDFieldOrInt {
	return ToLlvmNode(n.Child(selector.MDFieldOrInt)).(MDFieldOrInt)
}

type DIBasicType struct {
	*Node
}

func (n DIBasicType) Fields() []DIBasicTypeField {
	nodes := n.Children(selector.DIBasicTypeField)
	var ret = make([]DIBasicTypeField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIBasicTypeField))
	}
	return ret
}

type DICommonBlock struct {
	*Node
}

func (n DICommonBlock) Fields() []DICommonBlockField {
	nodes := n.Children(selector.DICommonBlockField)
	var ret = make([]DICommonBlockField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DICommonBlockField))
	}
	return ret
}

type DICompileUnit struct {
	*Node
}

func (n DICompileUnit) Fields() []DICompileUnitField {
	nodes := n.Children(selector.DICompileUnitField)
	var ret = make([]DICompileUnitField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DICompileUnitField))
	}
	return ret
}

type DICompositeType struct {
	*Node
}

func (n DICompositeType) Fields() []DICompositeTypeField {
	nodes := n.Children(selector.DICompositeTypeField)
	var ret = make([]DICompositeTypeField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DICompositeTypeField))
	}
	return ret
}

type DIDerivedType struct {
	*Node
}

func (n DIDerivedType) Fields() []DIDerivedTypeField {
	nodes := n.Children(selector.DIDerivedTypeField)
	var ret = make([]DIDerivedTypeField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIDerivedTypeField))
	}
	return ret
}

type DIEnumerator struct {
	*Node
}

func (n DIEnumerator) Fields() []DIEnumeratorField {
	nodes := n.Children(selector.DIEnumeratorField)
	var ret = make([]DIEnumeratorField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIEnumeratorField))
	}
	return ret
}

type DIExpression struct {
	*Node
}

func (n DIExpression) Fields() []DIExpressionField {
	nodes := n.Children(selector.DIExpressionField)
	var ret = make([]DIExpressionField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIExpressionField))
	}
	return ret
}

type DIFile struct {
	*Node
}

func (n DIFile) Fields() []DIFileField {
	nodes := n.Children(selector.DIFileField)
	var ret = make([]DIFileField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIFileField))
	}
	return ret
}

type DIFlagEnum struct {
	*Node
}

type DIFlagInt struct {
	*Node
}

func (n DIFlagInt) UintLit() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type DIFlags struct {
	*Node
}

func (n DIFlags) Flags() []DIFlag {
	nodes := n.Children(selector.DIFlag)
	var ret = make([]DIFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIFlag))
	}
	return ret
}

type DIGlobalVariable struct {
	*Node
}

func (n DIGlobalVariable) Fields() []DIGlobalVariableField {
	nodes := n.Children(selector.DIGlobalVariableField)
	var ret = make([]DIGlobalVariableField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIGlobalVariableField))
	}
	return ret
}

type DIGlobalVariableExpression struct {
	*Node
}

func (n DIGlobalVariableExpression) Fields() []DIGlobalVariableExpressionField {
	nodes := n.Children(selector.DIGlobalVariableExpressionField)
	var ret = make([]DIGlobalVariableExpressionField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIGlobalVariableExpressionField))
	}
	return ret
}

type DIImportedEntity struct {
	*Node
}

func (n DIImportedEntity) Fields() []DIImportedEntityField {
	nodes := n.Children(selector.DIImportedEntityField)
	var ret = make([]DIImportedEntityField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIImportedEntityField))
	}
	return ret
}

type DILabel struct {
	*Node
}

func (n DILabel) Fields() []DILabelField {
	nodes := n.Children(selector.DILabelField)
	var ret = make([]DILabelField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DILabelField))
	}
	return ret
}

type DILexicalBlock struct {
	*Node
}

func (n DILexicalBlock) Fields() []DILexicalBlockField {
	nodes := n.Children(selector.DILexicalBlockField)
	var ret = make([]DILexicalBlockField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DILexicalBlockField))
	}
	return ret
}

type DILexicalBlockFile struct {
	*Node
}

func (n DILexicalBlockFile) Fields() []DILexicalBlockFileField {
	nodes := n.Children(selector.DILexicalBlockFileField)
	var ret = make([]DILexicalBlockFileField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DILexicalBlockFileField))
	}
	return ret
}

type DILocalVariable struct {
	*Node
}

func (n DILocalVariable) Fields() []DILocalVariableField {
	nodes := n.Children(selector.DILocalVariableField)
	var ret = make([]DILocalVariableField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DILocalVariableField))
	}
	return ret
}

type DILocation struct {
	*Node
}

func (n DILocation) Fields() []DILocationField {
	nodes := n.Children(selector.DILocationField)
	var ret = make([]DILocationField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DILocationField))
	}
	return ret
}

type DIMacro struct {
	*Node
}

func (n DIMacro) Fields() []DIMacroField {
	nodes := n.Children(selector.DIMacroField)
	var ret = make([]DIMacroField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIMacroField))
	}
	return ret
}

type DIMacroFile struct {
	*Node
}

func (n DIMacroFile) Fields() []DIMacroFileField {
	nodes := n.Children(selector.DIMacroFileField)
	var ret = make([]DIMacroFileField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIMacroFileField))
	}
	return ret
}

type DIModule struct {
	*Node
}

func (n DIModule) Fields() []DIModuleField {
	nodes := n.Children(selector.DIModuleField)
	var ret = make([]DIModuleField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIModuleField))
	}
	return ret
}

type DINamespace struct {
	*Node
}

func (n DINamespace) Fields() []DINamespaceField {
	nodes := n.Children(selector.DINamespaceField)
	var ret = make([]DINamespaceField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DINamespaceField))
	}
	return ret
}

type DIObjCProperty struct {
	*Node
}

func (n DIObjCProperty) Fields() []DIObjCPropertyField {
	nodes := n.Children(selector.DIObjCPropertyField)
	var ret = make([]DIObjCPropertyField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIObjCPropertyField))
	}
	return ret
}

type DISPFlagEnum struct {
	*Node
}

type DISPFlagInt struct {
	*Node
}

func (n DISPFlagInt) UintLit() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type DISPFlags struct {
	*Node
}

func (n DISPFlags) Flags() []DISPFlag {
	nodes := n.Children(selector.DISPFlag)
	var ret = make([]DISPFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DISPFlag))
	}
	return ret
}

type DISubprogram struct {
	*Node
}

func (n DISubprogram) Fields() []DISubprogramField {
	nodes := n.Children(selector.DISubprogramField)
	var ret = make([]DISubprogramField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DISubprogramField))
	}
	return ret
}

type DISubrange struct {
	*Node
}

func (n DISubrange) Fields() []DISubrangeField {
	nodes := n.Children(selector.DISubrangeField)
	var ret = make([]DISubrangeField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DISubrangeField))
	}
	return ret
}

type DISubroutineType struct {
	*Node
}

func (n DISubroutineType) Fields() []DISubroutineTypeField {
	nodes := n.Children(selector.DISubroutineTypeField)
	var ret = make([]DISubroutineTypeField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DISubroutineTypeField))
	}
	return ret
}

type DITemplateTypeParameter struct {
	*Node
}

func (n DITemplateTypeParameter) Fields() []DITemplateTypeParameterField {
	nodes := n.Children(selector.DITemplateTypeParameterField)
	var ret = make([]DITemplateTypeParameterField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DITemplateTypeParameterField))
	}
	return ret
}

type DITemplateValueParameter struct {
	*Node
}

func (n DITemplateValueParameter) Fields() []DITemplateValueParameterField {
	nodes := n.Children(selector.DITemplateValueParameterField)
	var ret = make([]DITemplateValueParameterField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DITemplateValueParameterField))
	}
	return ret
}

type DLLStorageClass struct {
	*Node
}

type DataLocationField struct {
	*Node
}

func (n DataLocationField) DataLocation() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type DebugInfoForProfilingField struct {
	*Node
}

func (n DebugInfoForProfilingField) DebugInfoForProfiling() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type DeclarationField struct {
	*Node
}

func (n DeclarationField) Declaration() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type DefaultedField struct {
	*Node
}

func (n DefaultedField) Name() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type Dereferenceable struct {
	*Node
}

func (n Dereferenceable) N() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type DereferenceableOrNull struct {
	*Node
}

func (n DereferenceableOrNull) N() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type DirectoryField struct {
	*Node
}

func (n DirectoryField) Directory() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type DiscriminatorField struct {
	*Node
}

func (n DiscriminatorField) Discriminator() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type DiscriminatorIntField struct {
	*Node
}

func (n DiscriminatorIntField) Discriminator() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type Distinct struct {
	*Node
}

type DwarfAddressSpaceField struct {
	*Node
}

func (n DwarfAddressSpaceField) DwarfAddressSpace() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type DwarfAttEncodingEnum struct {
	*Node
}

type DwarfAttEncodingInt struct {
	*Node
}

func (n DwarfAttEncodingInt) UintLit() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type DwarfCCEnum struct {
	*Node
}

type DwarfCCInt struct {
	*Node
}

func (n DwarfCCInt) UintLit() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type DwarfLangEnum struct {
	*Node
}

type DwarfLangInt struct {
	*Node
}

func (n DwarfLangInt) UintLit() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type DwarfMacinfoEnum struct {
	*Node
}

type DwarfMacinfoInt struct {
	*Node
}

func (n DwarfMacinfoInt) UintLit() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type DwarfOp struct {
	*Node
}

type DwarfTagEnum struct {
	*Node
}

type DwarfTagInt struct {
	*Node
}

func (n DwarfTagInt) UintLit() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type DwarfVirtualityEnum struct {
	*Node
}

type DwarfVirtualityInt struct {
	*Node
}

func (n DwarfVirtualityInt) UintLit() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type DwoIdField struct {
	*Node
}

func (n DwoIdField) DwoId() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type ElementsField struct {
	*Node
}

func (n ElementsField) Elements() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type Ellipsis struct {
	*Node
}

type EmissionKindEnum struct {
	*Node
}

type EmissionKindField struct {
	*Node
}

func (n EmissionKindField) EmissionKind() EmissionKind {
	return ToLlvmNode(n.Child(selector.EmissionKind)).(EmissionKind)
}

type EmissionKindInt struct {
	*Node
}

func (n EmissionKindInt) UintLit() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type EncodingField struct {
	*Node
}

func (n EncodingField) Encoding() DwarfAttEncodingOrUint {
	return ToLlvmNode(n.Child(selector.DwarfAttEncodingOrUint)).(DwarfAttEncodingOrUint)
}

type EntityField struct {
	*Node
}

func (n EntityField) Entity() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type EnumsField struct {
	*Node
}

func (n EnumsField) Enums() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type Exact struct {
	*Node
}

type ExceptionArg struct {
	*Node
}

func (n ExceptionArg) Typ() LlvmNode {
	return ToLlvmNode(n.Child(selector.OneOf(ll.ArrayType, ll.FloatType, ll.IntType, ll.LabelType, ll.MMXType, ll.MetadataType, ll.NamedType, ll.PackedStructType, ll.PointerType, ll.ScalableVectorType, ll.StructType, ll.TokenType, ll.VectorType))).(LlvmNode)
}

func (n ExceptionArg) Val() LlvmNode {
	return ToLlvmNode(n.Child(selector.OneOf(ll.AShrExpr, ll.AddExpr, ll.AddrSpaceCastExpr, ll.AndExpr, ll.ArrayConst, ll.BitCastExpr, ll.BlockAddressConst, ll.BoolConst, ll.CharArrayConst, ll.DIBasicType, ll.DICommonBlock, ll.DICompileUnit, ll.DICompositeType, ll.DIDerivedType, ll.DIEnumerator, ll.DIExpression, ll.DIFile, ll.DIGlobalVariable, ll.DIGlobalVariableExpression, ll.DIImportedEntity, ll.DILabel, ll.DILexicalBlock, ll.DILexicalBlockFile, ll.DILocalVariable, ll.DILocation, ll.DIMacro, ll.DIMacroFile, ll.DIModule, ll.DINamespace, ll.DIObjCProperty, ll.DISubprogram, ll.DISubrange, ll.DISubroutineType, ll.DITemplateTypeParameter, ll.DITemplateValueParameter, ll.ExtractElementExpr, ll.ExtractValueExpr, ll.FAddExpr, ll.FCmpExpr, ll.FDivExpr, ll.FMulExpr, ll.FNegExpr, ll.FPExtExpr, ll.FPToSIExpr, ll.FPToUIExpr, ll.FPTruncExpr, ll.FRemExpr, ll.FSubExpr, ll.FloatConst, ll.GenericDINode, ll.GetElementPtrExpr, ll.GlobalIdent, ll.ICmpExpr, ll.InlineAsm, ll.InsertElementExpr, ll.InsertValueExpr, ll.IntConst, ll.IntToPtrExpr, ll.LShrExpr, ll.LocalIdent, ll.MDString, ll.MDTuple, ll.MetadataID, ll.MulExpr, ll.NoneConst, ll.NullConst, ll.OrExpr, ll.PtrToIntExpr, ll.SDivExpr, ll.SExtExpr, ll.SIToFPExpr, ll.SRemExpr, ll.SelectExpr, ll.ShlExpr, ll.ShuffleVectorExpr, ll.StructConst, ll.SubExpr, ll.TruncExpr, ll.TypeValue, ll.UDivExpr, ll.UIToFPExpr, ll.URemExpr, ll.UndefConst, ll.VectorConst, ll.XorExpr, ll.ZExtExpr, ll.ZeroInitializerConst))).(LlvmNode)
}

type ExportSymbolsField struct {
	*Node
}

func (n ExportSymbolsField) ExportSymbols() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type ExprField struct {
	*Node
}

func (n ExprField) Expr() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type ExternLinkage struct {
	*Node
}

type ExternallyInitialized struct {
	*Node
}

type ExtraDataField struct {
	*Node
}

func (n ExtraDataField) ExtraData() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type ExtractElementExpr struct {
	*Node
}

func (n ExtractElementExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n ExtractElementExpr) Index() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type ExtractElementInst struct {
	*Node
}

func (n ExtractElementInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n ExtractElementInst) Index() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n ExtractElementInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type ExtractValueExpr struct {
	*Node
}

func (n ExtractValueExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n ExtractValueExpr) Indices() []UintLit {
	nodes := n.Children(selector.UintLit)
	var ret = make([]UintLit, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, UintLit{node})
	}
	return ret
}

type ExtractValueInst struct {
	*Node
}

func (n ExtractValueInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n ExtractValueInst) Indices() []UintLit {
	nodes := n.Children(selector.UintLit)
	var ret = make([]UintLit, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, UintLit{node})
	}
	return ret
}

func (n ExtractValueInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FAddExpr struct {
	*Node
}

func (n FAddExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FAddExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type FAddInst struct {
	*Node
}

func (n FAddInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var ret = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, FastMathFlag{node})
	}
	return ret
}

func (n FAddInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FAddInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n FAddInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FCmpExpr struct {
	*Node
}

func (n FCmpExpr) Pred() FPred {
	return FPred{n.Child(selector.FPred)}
}

func (n FCmpExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FCmpExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type FCmpInst struct {
	*Node
}

func (n FCmpInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var ret = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, FastMathFlag{node})
	}
	return ret
}

func (n FCmpInst) Pred() FPred {
	return FPred{n.Child(selector.FPred)}
}

func (n FCmpInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FCmpInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n FCmpInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FDivExpr struct {
	*Node
}

func (n FDivExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FDivExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type FDivInst struct {
	*Node
}

func (n FDivInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var ret = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, FastMathFlag{node})
	}
	return ret
}

func (n FDivInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FDivInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n FDivInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FMulExpr struct {
	*Node
}

func (n FMulExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FMulExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type FMulInst struct {
	*Node
}

func (n FMulInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var ret = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, FastMathFlag{node})
	}
	return ret
}

func (n FMulInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FMulInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n FMulInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FNegExpr struct {
	*Node
}

func (n FNegExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

type FNegInst struct {
	*Node
}

func (n FNegInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var ret = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, FastMathFlag{node})
	}
	return ret
}

func (n FNegInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FNegInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FPExtExpr struct {
	*Node
}

func (n FPExtExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FPExtExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type FPExtInst struct {
	*Node
}

func (n FPExtInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FPExtInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n FPExtInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FPToSIExpr struct {
	*Node
}

func (n FPToSIExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FPToSIExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type FPToSIInst struct {
	*Node
}

func (n FPToSIInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FPToSIInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n FPToSIInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FPToUIExpr struct {
	*Node
}

func (n FPToUIExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FPToUIExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type FPToUIInst struct {
	*Node
}

func (n FPToUIInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FPToUIInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n FPToUIInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FPTruncExpr struct {
	*Node
}

func (n FPTruncExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FPTruncExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type FPTruncInst struct {
	*Node
}

func (n FPTruncInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FPTruncInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n FPTruncInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FPred struct {
	*Node
}

type FRemExpr struct {
	*Node
}

func (n FRemExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FRemExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type FRemInst struct {
	*Node
}

func (n FRemInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var ret = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, FastMathFlag{node})
	}
	return ret
}

func (n FRemInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FRemInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n FRemInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FSubExpr struct {
	*Node
}

func (n FSubExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FSubExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type FSubInst struct {
	*Node
}

func (n FSubInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var ret = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, FastMathFlag{node})
	}
	return ret
}

func (n FSubInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FSubInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n FSubInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FastMathFlag struct {
	*Node
}

type FenceInst struct {
	*Node
}

func (n FenceInst) SyncScope() (SyncScope, bool) {
	field := SyncScope{n.Child(selector.SyncScope)}
	return field, field.IsValid()
}

func (n FenceInst) Ordering() AtomicOrdering {
	return AtomicOrdering{n.Child(selector.AtomicOrdering)}
}

func (n FenceInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FileField struct {
	*Node
}

func (n FileField) File() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type FilenameField struct {
	*Node
}

func (n FilenameField) Filename() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type FlagsField struct {
	*Node
}

func (n FlagsField) Flags() DIFlags {
	return DIFlags{n.Child(selector.DIFlags)}
}

type FlagsStringField struct {
	*Node
}

func (n FlagsStringField) Flags() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type FloatConst struct {
	*Node
}

func (n FloatConst) FloatLit() FloatLit {
	return FloatLit{n.Child(selector.FloatLit)}
}

type FloatKind struct {
	*Node
}

type FloatLit struct {
	*Node
}

type FloatType struct {
	*Node
}

func (n FloatType) FloatKind() FloatKind {
	return FloatKind{n.Child(selector.FloatKind)}
}

type FreezeInst struct {
	*Node
}

func (n FreezeInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

type FuncAttr struct {
	*Node
}

type FuncBody struct {
	*Node
}

func (n FuncBody) Blocks() []BasicBlock {
	nodes := n.Children(selector.BasicBlock)
	var ret = make([]BasicBlock, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, BasicBlock{node})
	}
	return ret
}

func (n FuncBody) UseListOrders() []UseListOrder {
	nodes := n.Children(selector.UseListOrder)
	var ret = make([]UseListOrder, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, UseListOrder{node})
	}
	return ret
}

type FuncDecl struct {
	*Node
}

func (n FuncDecl) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

func (n FuncDecl) Header() FuncHeader {
	return FuncHeader{n.Child(selector.FuncHeader)}
}

type FuncDef struct {
	*Node
}

func (n FuncDef) Header() FuncHeader {
	return FuncHeader{n.Child(selector.FuncHeader)}
}

func (n FuncDef) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

func (n FuncDef) Body() FuncBody {
	return FuncBody{n.Child(selector.FuncBody)}
}

type FuncHeader struct {
	*Node
}

func (n FuncHeader) ExternLinkage() (ExternLinkage, bool) {
	field := ExternLinkage{n.Child(selector.ExternLinkage)}
	return field, field.IsValid()
}

func (n FuncHeader) Linkage() (Linkage, bool) {
	field := Linkage{n.Child(selector.Linkage)}
	return field, field.IsValid()
}

func (n FuncHeader) Preemption() (Preemption, bool) {
	field := Preemption{n.Child(selector.Preemption)}
	return field, field.IsValid()
}

func (n FuncHeader) Visibility() (Visibility, bool) {
	field := Visibility{n.Child(selector.Visibility)}
	return field, field.IsValid()
}

func (n FuncHeader) DLLStorageClass() (DLLStorageClass, bool) {
	field := DLLStorageClass{n.Child(selector.DLLStorageClass)}
	return field, field.IsValid()
}

func (n FuncHeader) CallingConv() (CallingConv, bool) {
	field := ToLlvmNode(n.Child(selector.CallingConv)).(CallingConv)
	return field, field.LlvmNode() != nil
}

func (n FuncHeader) ReturnAttrs() []ReturnAttribute {
	nodes := n.Children(selector.ReturnAttribute)
	var ret = make([]ReturnAttribute, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(ReturnAttribute))
	}
	return ret
}

func (n FuncHeader) RetType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n FuncHeader) Name() GlobalIdent {
	return GlobalIdent{n.Child(selector.GlobalIdent)}
}

func (n FuncHeader) Params() Params {
	return Params{n.Child(selector.Params)}
}

func (n FuncHeader) UnnamedAddr() (UnnamedAddr, bool) {
	field := UnnamedAddr{n.Child(selector.UnnamedAddr)}
	return field, field.IsValid()
}

func (n FuncHeader) AddrSpace() (AddrSpace, bool) {
	field := AddrSpace{n.Child(selector.AddrSpace)}
	return field, field.IsValid()
}

func (n FuncHeader) FuncHdrFields() []FuncHdrField {
	nodes := n.Children(selector.FuncHdrField)
	var ret = make([]FuncHdrField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(FuncHdrField))
	}
	return ret
}

type FuncType struct {
	*Node
}

func (n FuncType) RetType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n FuncType) Params() Params {
	return Params{n.Child(selector.Params)}
}

type GCNode struct {
	*Node
}

func (n GCNode) Name() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type GEPIndex struct {
	*Node
}

func (n GEPIndex) InRange() (InRange, bool) {
	field := InRange{n.Child(selector.InRange)}
	return field, field.IsValid()
}

func (n GEPIndex) Index() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

type GenericDINode struct {
	*Node
}

func (n GenericDINode) Fields() []GenericDINodeField {
	nodes := n.Children(selector.GenericDINodeField)
	var ret = make([]GenericDINodeField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(GenericDINodeField))
	}
	return ret
}

type GetElementPtrExpr struct {
	*Node
}

func (n GetElementPtrExpr) InBounds() (InBounds, bool) {
	field := InBounds{n.Child(selector.InBounds)}
	return field, field.IsValid()
}

func (n GetElementPtrExpr) ElemType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n GetElementPtrExpr) Src() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n GetElementPtrExpr) Indices() []GEPIndex {
	nodes := n.Children(selector.GEPIndex)
	var ret = make([]GEPIndex, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, GEPIndex{node})
	}
	return ret
}

type GetElementPtrInst struct {
	*Node
}

func (n GetElementPtrInst) InBounds() (InBounds, bool) {
	field := InBounds{n.Child(selector.InBounds)}
	return field, field.IsValid()
}

func (n GetElementPtrInst) ElemType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n GetElementPtrInst) Src() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n GetElementPtrInst) Indices() []TypeValue {
	nodes := n.Child(selector.TypeValue).NextAll(selector.TypeValue)
	var ret = make([]TypeValue, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, TypeValue{node})
	}
	return ret
}

func (n GetElementPtrInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type GetterField struct {
	*Node
}

func (n GetterField) Getter() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type GlobalDecl struct {
	*Node
}

func (n GlobalDecl) Name() GlobalIdent {
	return GlobalIdent{n.Child(selector.GlobalIdent)}
}

func (n GlobalDecl) Linkage() (LlvmNode, bool) {
	field := ToLlvmNode(n.Child(selector.OneOf(ll.ExternLinkage, ll.Linkage))).(LlvmNode)
	return field, field.LlvmNode() != nil
}

func (n GlobalDecl) Preemption() (Preemption, bool) {
	field := Preemption{n.Child(selector.Preemption)}
	return field, field.IsValid()
}

func (n GlobalDecl) Visibility() (Visibility, bool) {
	field := Visibility{n.Child(selector.Visibility)}
	return field, field.IsValid()
}

func (n GlobalDecl) DLLStorageClass() (DLLStorageClass, bool) {
	field := DLLStorageClass{n.Child(selector.DLLStorageClass)}
	return field, field.IsValid()
}

func (n GlobalDecl) ThreadLocal() (ThreadLocal, bool) {
	field := ThreadLocal{n.Child(selector.ThreadLocal)}
	return field, field.IsValid()
}

func (n GlobalDecl) UnnamedAddr() (UnnamedAddr, bool) {
	field := UnnamedAddr{n.Child(selector.UnnamedAddr)}
	return field, field.IsValid()
}

func (n GlobalDecl) AddrSpace() (AddrSpace, bool) {
	field := AddrSpace{n.Child(selector.AddrSpace)}
	return field, field.IsValid()
}

func (n GlobalDecl) ExternallyInitialized() (ExternallyInitialized, bool) {
	field := ExternallyInitialized{n.Child(selector.ExternallyInitialized)}
	return field, field.IsValid()
}

func (n GlobalDecl) Immutable() Immutable {
	return Immutable{n.Child(selector.Immutable)}
}

func (n GlobalDecl) ContentType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n GlobalDecl) Init() (Constant, bool) {
	field := ToLlvmNode(n.Child(selector.GlobalIdent).Next(selector.Constant)).(Constant)
	return field, field.LlvmNode() != nil
}

func (n GlobalDecl) GlobalFields() []GlobalField {
	nodes := n.Children(selector.GlobalField)
	var ret = make([]GlobalField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(GlobalField))
	}
	return ret
}

func (n GlobalDecl) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

func (n GlobalDecl) FuncAttrs() []FuncAttribute {
	nodes := n.Children(selector.FuncAttribute)
	var ret = make([]FuncAttribute, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(FuncAttribute))
	}
	return ret
}

type GlobalIdent struct {
	*Node
}

type GlobalsField struct {
	*Node
}

func (n GlobalsField) Globals() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type Handlers struct {
	*Node
}

func (n Handlers) Labels() []Label {
	nodes := n.Children(selector.Label)
	var ret = make([]Label, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, Label{node})
	}
	return ret
}

type HeaderField struct {
	*Node
}

func (n HeaderField) Header() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type ICmpExpr struct {
	*Node
}

func (n ICmpExpr) Pred() IPred {
	return IPred{n.Child(selector.IPred)}
}

func (n ICmpExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n ICmpExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type ICmpInst struct {
	*Node
}

func (n ICmpInst) Pred() IPred {
	return IPred{n.Child(selector.IPred)}
}

func (n ICmpInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n ICmpInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n ICmpInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type IPred struct {
	*Node
}

type IdentifierField struct {
	*Node
}

func (n IdentifierField) Identifier() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type Immutable struct {
	*Node
}

type ImportsField struct {
	*Node
}

func (n ImportsField) Imports() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type InAlloca struct {
	*Node
}

type InBounds struct {
	*Node
}

type InRange struct {
	*Node
}

type Inc struct {
	*Node
}

func (n Inc) X() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n Inc) Pred() LocalIdent {
	return LocalIdent{n.Child(selector.Value).Next(selector.LocalIdent)}
}

type IncludePathField struct {
	*Node
}

func (n IncludePathField) IncludePath() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type IndirectBrTerm struct {
	*Node
}

func (n IndirectBrTerm) Addr() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n IndirectBrTerm) ValidTargets() []Label {
	nodes := n.Children(selector.Label)
	var ret = make([]Label, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, Label{node})
	}
	return ret
}

func (n IndirectBrTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type IndirectSymbolDef struct {
	*Node
}

func (n IndirectSymbolDef) Name() GlobalIdent {
	return GlobalIdent{n.Child(selector.GlobalIdent)}
}

func (n IndirectSymbolDef) ExternLinkage() (ExternLinkage, bool) {
	field := ExternLinkage{n.Child(selector.ExternLinkage)}
	return field, field.IsValid()
}

func (n IndirectSymbolDef) Linkage() (Linkage, bool) {
	field := Linkage{n.Child(selector.Linkage)}
	return field, field.IsValid()
}

func (n IndirectSymbolDef) Preemption() (Preemption, bool) {
	field := Preemption{n.Child(selector.Preemption)}
	return field, field.IsValid()
}

func (n IndirectSymbolDef) Visibility() (Visibility, bool) {
	field := Visibility{n.Child(selector.Visibility)}
	return field, field.IsValid()
}

func (n IndirectSymbolDef) DLLStorageClass() (DLLStorageClass, bool) {
	field := DLLStorageClass{n.Child(selector.DLLStorageClass)}
	return field, field.IsValid()
}

func (n IndirectSymbolDef) ThreadLocal() (ThreadLocal, bool) {
	field := ThreadLocal{n.Child(selector.ThreadLocal)}
	return field, field.IsValid()
}

func (n IndirectSymbolDef) UnnamedAddr() (UnnamedAddr, bool) {
	field := UnnamedAddr{n.Child(selector.UnnamedAddr)}
	return field, field.IsValid()
}

func (n IndirectSymbolDef) IndirectSymbolKind() IndirectSymbolKind {
	return IndirectSymbolKind{n.Child(selector.IndirectSymbolKind)}
}

func (n IndirectSymbolDef) ContentType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n IndirectSymbolDef) IndirectSymbol() IndirectSymbol {
	return ToLlvmNode(n.Child(selector.IndirectSymbol)).(IndirectSymbol)
}

func (n IndirectSymbolDef) Partitions() []Partition {
	nodes := n.Children(selector.Partition)
	var ret = make([]Partition, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, Partition{node})
	}
	return ret
}

type IndirectSymbolKind struct {
	*Node
}

type InlineAsm struct {
	*Node
}

func (n InlineAsm) SideEffect() (SideEffect, bool) {
	field := SideEffect{n.Child(selector.SideEffect)}
	return field, field.IsValid()
}

func (n InlineAsm) AlignStackTok() (AlignStackTok, bool) {
	field := AlignStackTok{n.Child(selector.AlignStackTok)}
	return field, field.IsValid()
}

func (n InlineAsm) IntelDialect() (IntelDialect, bool) {
	field := IntelDialect{n.Child(selector.IntelDialect)}
	return field, field.IsValid()
}

func (n InlineAsm) Asm() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

func (n InlineAsm) Constraints() StringLit {
	return StringLit{n.Child(selector.StringLit).Next(selector.StringLit)}
}

type InlinedAtField struct {
	*Node
}

func (n InlinedAtField) InlinedAt() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type InsertElementExpr struct {
	*Node
}

func (n InsertElementExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n InsertElementExpr) Elem() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

func (n InsertElementExpr) Index() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst).Next(selector.TypeConst)}
}

type InsertElementInst struct {
	*Node
}

func (n InsertElementInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n InsertElementInst) Elem() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n InsertElementInst) Index() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue).Next(selector.TypeValue)}
}

func (n InsertElementInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type InsertValueExpr struct {
	*Node
}

func (n InsertValueExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n InsertValueExpr) Elem() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

func (n InsertValueExpr) Indices() []UintLit {
	nodes := n.Children(selector.UintLit)
	var ret = make([]UintLit, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, UintLit{node})
	}
	return ret
}

type InsertValueInst struct {
	*Node
}

func (n InsertValueInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n InsertValueInst) Elem() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n InsertValueInst) Indices() []UintLit {
	nodes := n.Children(selector.UintLit)
	var ret = make([]UintLit, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, UintLit{node})
	}
	return ret
}

func (n InsertValueInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type IntConst struct {
	*Node
}

func (n IntConst) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type IntLit struct {
	*Node
}

type IntToPtrExpr struct {
	*Node
}

func (n IntToPtrExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n IntToPtrExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type IntToPtrInst struct {
	*Node
}

func (n IntToPtrInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n IntToPtrInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n IntToPtrInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type IntType struct {
	*Node
}

type IntelDialect struct {
	*Node
}

type InvokeTerm struct {
	*Node
}

func (n InvokeTerm) CallingConv() (CallingConv, bool) {
	field := ToLlvmNode(n.Child(selector.CallingConv)).(CallingConv)
	return field, field.LlvmNode() != nil
}

func (n InvokeTerm) ReturnAttrs() []ReturnAttribute {
	nodes := n.Children(selector.ReturnAttribute)
	var ret = make([]ReturnAttribute, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(ReturnAttribute))
	}
	return ret
}

func (n InvokeTerm) AddrSpace() (AddrSpace, bool) {
	field := AddrSpace{n.Child(selector.AddrSpace)}
	return field, field.IsValid()
}

func (n InvokeTerm) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n InvokeTerm) Invokee() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n InvokeTerm) Args() Args {
	return Args{n.Child(selector.Args)}
}

func (n InvokeTerm) FuncAttrs() []FuncAttribute {
	nodes := n.Children(selector.FuncAttribute)
	var ret = make([]FuncAttribute, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(FuncAttribute))
	}
	return ret
}

func (n InvokeTerm) OperandBundles() []OperandBundle {
	nodes := n.Children(selector.OperandBundle)
	var ret = make([]OperandBundle, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, OperandBundle{node})
	}
	return ret
}

func (n InvokeTerm) NormalRetTarget() Label {
	return Label{n.Child(selector.Label)}
}

func (n InvokeTerm) ExceptionRetTarget() Label {
	return Label{n.Child(selector.Label).Next(selector.Label)}
}

func (n InvokeTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type IsDeclField struct {
	*Node
}

func (n IsDeclField) IsDecl() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type IsDefinitionField struct {
	*Node
}

func (n IsDefinitionField) IsDefinition() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type IsImplicitCodeField struct {
	*Node
}

func (n IsImplicitCodeField) IsImplicitCode() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type IsLocalField struct {
	*Node
}

func (n IsLocalField) IsLocal() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type IsOptimizedField struct {
	*Node
}

func (n IsOptimizedField) IsOptimized() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type IsUnsignedField struct {
	*Node
}

func (n IsUnsignedField) IsUnsigned() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type LShrExpr struct {
	*Node
}

func (n LShrExpr) Exact() (Exact, bool) {
	field := Exact{n.Child(selector.Exact)}
	return field, field.IsValid()
}

func (n LShrExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n LShrExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type LShrInst struct {
	*Node
}

func (n LShrInst) Exact() (Exact, bool) {
	field := Exact{n.Child(selector.Exact)}
	return field, field.IsValid()
}

func (n LShrInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n LShrInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n LShrInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type Label struct {
	*Node
}

func (n Label) Typ() LabelType {
	return LabelType{n.Child(selector.LabelType)}
}

func (n Label) Name() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

type LabelIdent struct {
	*Node
}

type LabelType struct {
	*Node
}

type LandingPadInst struct {
	*Node
}

func (n LandingPadInst) ResultType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n LandingPadInst) Cleanup() (Cleanup, bool) {
	field := Cleanup{n.Child(selector.Cleanup)}
	return field, field.IsValid()
}

func (n LandingPadInst) Clauses() []Clause {
	nodes := n.Children(selector.Clause)
	var ret = make([]Clause, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, Clause{node})
	}
	return ret
}

func (n LandingPadInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type LanguageField struct {
	*Node
}

func (n LanguageField) Language() DwarfLang {
	return ToLlvmNode(n.Child(selector.DwarfLang)).(DwarfLang)
}

type LineField struct {
	*Node
}

func (n LineField) Line() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type Linkage struct {
	*Node
}

type LinkageNameField struct {
	*Node
}

func (n LinkageNameField) LinkageName() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type LoadInst struct {
	*Node
}

func (n LoadInst) Atomic() (Atomic, bool) {
	field := Atomic{n.Child(selector.Atomic)}
	return field, field.IsValid()
}

func (n LoadInst) Volatile() (Volatile, bool) {
	field := Volatile{n.Child(selector.Volatile)}
	return field, field.IsValid()
}

func (n LoadInst) ElemType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n LoadInst) Src() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n LoadInst) SyncScope() (SyncScope, bool) {
	field := SyncScope{n.Child(selector.SyncScope)}
	return field, field.IsValid()
}

func (n LoadInst) Ordering() (AtomicOrdering, bool) {
	field := AtomicOrdering{n.Child(selector.AtomicOrdering)}
	return field, field.IsValid()
}

func (n LoadInst) Align() (Align, bool) {
	field := Align{n.Child(selector.Align)}
	return field, field.IsValid()
}

func (n LoadInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type LocalDefInst struct {
	*Node
}

func (n LocalDefInst) Name() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

func (n LocalDefInst) Inst() ValueInstruction {
	return ToLlvmNode(n.Child(selector.ValueInstruction)).(ValueInstruction)
}

type LocalDefTerm struct {
	*Node
}

func (n LocalDefTerm) Name() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

func (n LocalDefTerm) Term() ValueTerminator {
	return ToLlvmNode(n.Child(selector.ValueTerminator)).(ValueTerminator)
}

type LocalIdent struct {
	*Node
}

type LowerBoundField struct {
	*Node
}

func (n LowerBoundField) LowerBound() MDFieldOrInt {
	return ToLlvmNode(n.Child(selector.MDFieldOrInt)).(MDFieldOrInt)
}

type MDString struct {
	*Node
}

func (n MDString) Val() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type MDTuple struct {
	*Node
}

func (n MDTuple) MDFields() []MDField {
	nodes := n.Children(selector.MDField)
	var ret = make([]MDField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(MDField))
	}
	return ret
}

type MMXType struct {
	*Node
}

type MacrosField struct {
	*Node
}

func (n MacrosField) Macros() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type MetadataAttachment struct {
	*Node
}

func (n MetadataAttachment) Name() MetadataName {
	return MetadataName{n.Child(selector.MetadataName)}
}

func (n MetadataAttachment) MDNode() MDNode {
	return ToLlvmNode(n.Child(selector.MDNode)).(MDNode)
}

type MetadataDef struct {
	*Node
}

func (n MetadataDef) ID() MetadataID {
	return MetadataID{n.Child(selector.MetadataID)}
}

func (n MetadataDef) Distinct() (Distinct, bool) {
	field := Distinct{n.Child(selector.Distinct)}
	return field, field.IsValid()
}

func (n MetadataDef) MDNode() LlvmNode {
	return ToLlvmNode(n.Child(selector.OneOf(ll.DIBasicType, ll.DICommonBlock, ll.DICompileUnit, ll.DICompositeType, ll.DIDerivedType, ll.DIEnumerator, ll.DIExpression, ll.DIFile, ll.DIGlobalVariable, ll.DIGlobalVariableExpression, ll.DIImportedEntity, ll.DILabel, ll.DILexicalBlock, ll.DILexicalBlockFile, ll.DILocalVariable, ll.DILocation, ll.DIMacro, ll.DIMacroFile, ll.DIModule, ll.DINamespace, ll.DIObjCProperty, ll.DISubprogram, ll.DISubrange, ll.DISubroutineType, ll.DITemplateTypeParameter, ll.DITemplateValueParameter, ll.GenericDINode, ll.MDTuple))).(LlvmNode)
}

type MetadataID struct {
	*Node
}

type MetadataName struct {
	*Node
}

type MetadataType struct {
	*Node
}

type Module struct {
	*Node
}

func (n Module) TargetDefs() []TargetDef {
	nodes := n.Children(selector.TargetDef)
	var ret = make([]TargetDef, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(TargetDef))
	}
	return ret
}

func (n Module) TopLevelEntities() []TopLevelEntity {
	nodes := n.Children(selector.TopLevelEntity)
	var ret = make([]TopLevelEntity, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(TopLevelEntity))
	}
	return ret
}

type ModuleAsm struct {
	*Node
}

func (n ModuleAsm) Asm() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type MulExpr struct {
	*Node
}

func (n MulExpr) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var ret = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, OverflowFlag{node})
	}
	return ret
}

func (n MulExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n MulExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type MulInst struct {
	*Node
}

func (n MulInst) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var ret = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, OverflowFlag{node})
	}
	return ret
}

func (n MulInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n MulInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n MulInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type NameField struct {
	*Node
}

func (n NameField) Name() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type NameTableKindEnum struct {
	*Node
}

type NameTableKindField struct {
	*Node
}

func (n NameTableKindField) NameTableKind() NameTableKind {
	return ToLlvmNode(n.Child(selector.NameTableKind)).(NameTableKind)
}

type NameTableKindInt struct {
	*Node
}

func (n NameTableKindInt) UintLit() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type NamedMetadataDef struct {
	*Node
}

func (n NamedMetadataDef) Name() MetadataName {
	return MetadataName{n.Child(selector.MetadataName)}
}

func (n NamedMetadataDef) MDNodes() []MetadataNode {
	nodes := n.Children(selector.MetadataNode)
	var ret = make([]MetadataNode, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(MetadataNode))
	}
	return ret
}

type NamedType struct {
	*Node
}

func (n NamedType) Name() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

type NodesField struct {
	*Node
}

func (n NodesField) Nodes() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type NoneConst struct {
	*Node
}

type NullConst struct {
	*Node
}

func (n NullConst) NullLit() NullLit {
	return NullLit{n.Child(selector.NullLit)}
}

type NullLit struct {
	*Node
}

type OffsetField struct {
	*Node
}

func (n OffsetField) OffsetField() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type OpaqueType struct {
	*Node
}

type OperandBundle struct {
	*Node
}

func (n OperandBundle) Tag() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

func (n OperandBundle) Inputs() []TypeValue {
	nodes := n.Children(selector.TypeValue)
	var ret = make([]TypeValue, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, TypeValue{node})
	}
	return ret
}

type OperandsField struct {
	*Node
}

func (n OperandsField) Operands() []MDField {
	nodes := n.Children(selector.MDField)
	var ret = make([]MDField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(MDField))
	}
	return ret
}

type OrExpr struct {
	*Node
}

func (n OrExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n OrExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type OrInst struct {
	*Node
}

func (n OrInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n OrInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n OrInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type OverflowFlag struct {
	*Node
}

type PackedStructType struct {
	*Node
}

func (n PackedStructType) Fields() []Type {
	nodes := n.Children(selector.Type)
	var ret = make([]Type, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(Type))
	}
	return ret
}

type Param struct {
	*Node
}

func (n Param) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n Param) Attrs() []ParamAttribute {
	nodes := n.Children(selector.ParamAttribute)
	var ret = make([]ParamAttribute, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(ParamAttribute))
	}
	return ret
}

func (n Param) Name() (LocalIdent, bool) {
	field := LocalIdent{n.Child(selector.LocalIdent)}
	return field, field.IsValid()
}

type ParamAttr struct {
	*Node
}

type Params struct {
	*Node
}

func (n Params) Params() []Param {
	nodes := n.Children(selector.Param)
	var ret = make([]Param, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, Param{node})
	}
	return ret
}

func (n Params) Variadic() (Ellipsis, bool) {
	field := Ellipsis{n.Child(selector.Ellipsis)}
	return field, field.IsValid()
}

type Partition struct {
	*Node
}

func (n Partition) Name() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type Personality struct {
	*Node
}

func (n Personality) TypeConst() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

type PhiInst struct {
	*Node
}

func (n PhiInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var ret = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, FastMathFlag{node})
	}
	return ret
}

func (n PhiInst) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n PhiInst) Incs() []Inc {
	nodes := n.Children(selector.Inc)
	var ret = make([]Inc, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, Inc{node})
	}
	return ret
}

func (n PhiInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type PointerType struct {
	*Node
}

func (n PointerType) Elem() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n PointerType) AddrSpace() (AddrSpace, bool) {
	field := AddrSpace{n.Child(selector.AddrSpace)}
	return field, field.IsValid()
}

type Preallocated struct {
	*Node
}

func (n Preallocated) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type Preemption struct {
	*Node
}

type Prefix struct {
	*Node
}

func (n Prefix) TypeConst() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

type ProducerField struct {
	*Node
}

func (n ProducerField) Producer() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type Prologue struct {
	*Node
}

func (n Prologue) TypeConst() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

type PtrToIntExpr struct {
	*Node
}

func (n PtrToIntExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n PtrToIntExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type PtrToIntInst struct {
	*Node
}

func (n PtrToIntInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n PtrToIntInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n PtrToIntInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type RangesBaseAddressField struct {
	*Node
}

func (n RangesBaseAddressField) RangesBaseAddress() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type ResumeTerm struct {
	*Node
}

func (n ResumeTerm) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n ResumeTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type RetTerm struct {
	*Node
}

func (n RetTerm) XTyp() LlvmNode {
	return ToLlvmNode(n.Child(selector.OneOf(ll.ArrayType, ll.FloatType, ll.IntType, ll.LabelType, ll.MMXType, ll.NamedType, ll.PackedStructType, ll.PointerType, ll.ScalableVectorType, ll.StructType, ll.TokenType, ll.VectorType, ll.VoidType))).(LlvmNode)
}

func (n RetTerm) X() (Value, bool) {
	field := ToLlvmNode(n.Child(selector.Value)).(Value)
	return field, field.LlvmNode() != nil
}

func (n RetTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type RetainedNodesField struct {
	*Node
}

func (n RetainedNodesField) RetainedNodes() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type RetainedTypesField struct {
	*Node
}

func (n RetainedTypesField) RetainedTypes() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type ReturnAttr struct {
	*Node
}

type RuntimeLangField struct {
	*Node
}

func (n RuntimeLangField) RuntimeLang() DwarfLang {
	return ToLlvmNode(n.Child(selector.DwarfLang)).(DwarfLang)
}

type RuntimeVersionField struct {
	*Node
}

func (n RuntimeVersionField) RuntimeVersion() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type SDKField struct {
	*Node
}

func (n SDKField) SDK() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type SDivExpr struct {
	*Node
}

func (n SDivExpr) Exact() (Exact, bool) {
	field := Exact{n.Child(selector.Exact)}
	return field, field.IsValid()
}

func (n SDivExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n SDivExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type SDivInst struct {
	*Node
}

func (n SDivInst) Exact() (Exact, bool) {
	field := Exact{n.Child(selector.Exact)}
	return field, field.IsValid()
}

func (n SDivInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n SDivInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n SDivInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type SExtExpr struct {
	*Node
}

func (n SExtExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n SExtExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type SExtInst struct {
	*Node
}

func (n SExtInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n SExtInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n SExtInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type SIToFPExpr struct {
	*Node
}

func (n SIToFPExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n SIToFPExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type SIToFPInst struct {
	*Node
}

func (n SIToFPInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n SIToFPInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n SIToFPInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type SPFlagsField struct {
	*Node
}

func (n SPFlagsField) SPFlags() DISPFlags {
	return DISPFlags{n.Child(selector.DISPFlags)}
}

type SRemExpr struct {
	*Node
}

func (n SRemExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n SRemExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type SRemInst struct {
	*Node
}

func (n SRemInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n SRemInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n SRemInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type ScalableVectorType struct {
	*Node
}

func (n ScalableVectorType) Len() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

func (n ScalableVectorType) Elem() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type ScopeField struct {
	*Node
}

func (n ScopeField) Scope() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type ScopeLineField struct {
	*Node
}

func (n ScopeLineField) ScopeLine() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type Section struct {
	*Node
}

func (n Section) Name() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type SelectExpr struct {
	*Node
}

func (n SelectExpr) Cond() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n SelectExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

func (n SelectExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst).Next(selector.TypeConst)}
}

type SelectInst struct {
	*Node
}

func (n SelectInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var ret = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, FastMathFlag{node})
	}
	return ret
}

func (n SelectInst) Cond() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n SelectInst) ValueTrue() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n SelectInst) ValueFalse() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue).Next(selector.TypeValue)}
}

func (n SelectInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type SelectionKind struct {
	*Node
}

type SetterField struct {
	*Node
}

func (n SetterField) Setter() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type ShlExpr struct {
	*Node
}

func (n ShlExpr) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var ret = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, OverflowFlag{node})
	}
	return ret
}

func (n ShlExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n ShlExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type ShlInst struct {
	*Node
}

func (n ShlInst) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var ret = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, OverflowFlag{node})
	}
	return ret
}

func (n ShlInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n ShlInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n ShlInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type ShuffleVectorExpr struct {
	*Node
}

func (n ShuffleVectorExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n ShuffleVectorExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

func (n ShuffleVectorExpr) Mask() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst).Next(selector.TypeConst)}
}

type ShuffleVectorInst struct {
	*Node
}

func (n ShuffleVectorInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n ShuffleVectorInst) Y() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n ShuffleVectorInst) Mask() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue).Next(selector.TypeValue)}
}

func (n ShuffleVectorInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type SideEffect struct {
	*Node
}

type SizeField struct {
	*Node
}

func (n SizeField) Size() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type SourceField struct {
	*Node
}

func (n SourceField) Source() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type SourceFilename struct {
	*Node
}

func (n SourceFilename) Name() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type SplitDebugFilenameField struct {
	*Node
}

func (n SplitDebugFilenameField) SplitDebugFilename() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type SplitDebugInliningField struct {
	*Node
}

func (n SplitDebugInliningField) SplitDebugInlining() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type StoreInst struct {
	*Node
}

func (n StoreInst) Atomic() (Atomic, bool) {
	field := Atomic{n.Child(selector.Atomic)}
	return field, field.IsValid()
}

func (n StoreInst) Volatile() (Volatile, bool) {
	field := Volatile{n.Child(selector.Volatile)}
	return field, field.IsValid()
}

func (n StoreInst) Src() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n StoreInst) Dst() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n StoreInst) SyncScope() (SyncScope, bool) {
	field := SyncScope{n.Child(selector.SyncScope)}
	return field, field.IsValid()
}

func (n StoreInst) Ordering() (AtomicOrdering, bool) {
	field := AtomicOrdering{n.Child(selector.AtomicOrdering)}
	return field, field.IsValid()
}

func (n StoreInst) Align() (Align, bool) {
	field := Align{n.Child(selector.Align)}
	return field, field.IsValid()
}

func (n StoreInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type StrideField struct {
	*Node
}

func (n StrideField) Stride() MDFieldOrInt {
	return ToLlvmNode(n.Child(selector.MDFieldOrInt)).(MDFieldOrInt)
}

type StringLit struct {
	*Node
}

type StructConst struct {
	*Node
}

func (n StructConst) Fields() []TypeConst {
	nodes := n.Children(selector.TypeConst)
	var ret = make([]TypeConst, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, TypeConst{node})
	}
	return ret
}

type StructRetAttr struct {
	*Node
}

func (n StructRetAttr) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type StructType struct {
	*Node
}

func (n StructType) Fields() []Type {
	nodes := n.Children(selector.Type)
	var ret = make([]Type, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(Type))
	}
	return ret
}

type SubExpr struct {
	*Node
}

func (n SubExpr) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var ret = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, OverflowFlag{node})
	}
	return ret
}

func (n SubExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n SubExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type SubInst struct {
	*Node
}

func (n SubInst) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var ret = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, OverflowFlag{node})
	}
	return ret
}

func (n SubInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n SubInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n SubInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type SwiftError struct {
	*Node
}

type SwitchTerm struct {
	*Node
}

func (n SwitchTerm) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n SwitchTerm) Default() Label {
	return Label{n.Child(selector.Label)}
}

func (n SwitchTerm) Cases() []Case {
	nodes := n.Children(selector.Case)
	var ret = make([]Case, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, Case{node})
	}
	return ret
}

func (n SwitchTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type SyncScope struct {
	*Node
}

func (n SyncScope) Scope() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type SysrootField struct {
	*Node
}

func (n SysrootField) Sysroot() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type TLSModel struct {
	*Node
}

type TagField struct {
	*Node
}

func (n TagField) Tag() DwarfTag {
	return ToLlvmNode(n.Child(selector.DwarfTag)).(DwarfTag)
}

type Tail struct {
	*Node
}

type TargetDataLayout struct {
	*Node
}

func (n TargetDataLayout) DataLayout() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type TargetTriple struct {
	*Node
}

func (n TargetTriple) TargetTriple() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type TemplateParamsField struct {
	*Node
}

func (n TemplateParamsField) TemplateParams() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type ThisAdjustmentField struct {
	*Node
}

func (n ThisAdjustmentField) ThisAdjustment() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type ThreadLocal struct {
	*Node
}

func (n ThreadLocal) Model() (TLSModel, bool) {
	field := TLSModel{n.Child(selector.TLSModel)}
	return field, field.IsValid()
}

type ThrownTypesField struct {
	*Node
}

func (n ThrownTypesField) ThrownTypes() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type TokenType struct {
	*Node
}

type TruncExpr struct {
	*Node
}

func (n TruncExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n TruncExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type TruncInst struct {
	*Node
}

func (n TruncInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n TruncInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n TruncInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type TypeConst struct {
	*Node
}

func (n TypeConst) Typ() FirstClassType {
	return ToLlvmNode(n.Child(selector.FirstClassType)).(FirstClassType)
}

func (n TypeConst) Val() Constant {
	return ToLlvmNode(n.Child(selector.Constant)).(Constant)
}

type TypeDef struct {
	*Node
}

func (n TypeDef) Name() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

func (n TypeDef) Typ() LlvmNode {
	return ToLlvmNode(n.Child(selector.OneOf(ll.ArrayType, ll.FloatType, ll.FuncType, ll.IntType, ll.LabelType, ll.MMXType, ll.MetadataType, ll.NamedType, ll.OpaqueType, ll.PackedStructType, ll.PointerType, ll.ScalableVectorType, ll.StructType, ll.TokenType, ll.VectorType, ll.VoidType))).(LlvmNode)
}

type TypeField struct {
	*Node
}

func (n TypeField) Typ() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type TypeMacinfoField struct {
	*Node
}

func (n TypeMacinfoField) Typ() DwarfMacinfo {
	return ToLlvmNode(n.Child(selector.DwarfMacinfo)).(DwarfMacinfo)
}

type TypeValue struct {
	*Node
}

func (n TypeValue) Typ() FirstClassType {
	return ToLlvmNode(n.Child(selector.FirstClassType)).(FirstClassType)
}

func (n TypeValue) Val() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

type TypesField struct {
	*Node
}

func (n TypesField) Types() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type UDivExpr struct {
	*Node
}

func (n UDivExpr) Exact() (Exact, bool) {
	field := Exact{n.Child(selector.Exact)}
	return field, field.IsValid()
}

func (n UDivExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n UDivExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type UDivInst struct {
	*Node
}

func (n UDivInst) Exact() (Exact, bool) {
	field := Exact{n.Child(selector.Exact)}
	return field, field.IsValid()
}

func (n UDivInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n UDivInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n UDivInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type UIToFPExpr struct {
	*Node
}

func (n UIToFPExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n UIToFPExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type UIToFPInst struct {
	*Node
}

func (n UIToFPInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n UIToFPInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n UIToFPInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type URemExpr struct {
	*Node
}

func (n URemExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n URemExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type URemInst struct {
	*Node
}

func (n URemInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n URemInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n URemInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type UintLit struct {
	*Node
}

type UndefConst struct {
	*Node
}

type UnitField struct {
	*Node
}

func (n UnitField) Unit() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type UnnamedAddr struct {
	*Node
}

type UnreachableTerm struct {
	*Node
}

func (n UnreachableTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type UnwindToCaller struct {
	*Node
}

type UpperBoundField struct {
	*Node
}

func (n UpperBoundField) UpperBound() MDFieldOrInt {
	return ToLlvmNode(n.Child(selector.MDFieldOrInt)).(MDFieldOrInt)
}

type UseListOrder struct {
	*Node
}

func (n UseListOrder) Val() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n UseListOrder) Indices() []UintLit {
	nodes := n.Children(selector.UintLit)
	var ret = make([]UintLit, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, UintLit{node})
	}
	return ret
}

type UseListOrderBB struct {
	*Node
}

func (n UseListOrderBB) Func() GlobalIdent {
	return GlobalIdent{n.Child(selector.GlobalIdent)}
}

func (n UseListOrderBB) Block() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

func (n UseListOrderBB) Indices() []UintLit {
	nodes := n.Children(selector.UintLit)
	var ret = make([]UintLit, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, UintLit{node})
	}
	return ret
}

type VAArgInst struct {
	*Node
}

func (n VAArgInst) ArgList() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n VAArgInst) ArgType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n VAArgInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type ValueField struct {
	*Node
}

func (n ValueField) Value() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type ValueIntField struct {
	*Node
}

func (n ValueIntField) Value() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type ValueStringField struct {
	*Node
}

func (n ValueStringField) Value() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type VarField struct {
	*Node
}

func (n VarField) Var() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type VectorConst struct {
	*Node
}

func (n VectorConst) Elems() []TypeConst {
	nodes := n.Children(selector.TypeConst)
	var ret = make([]TypeConst, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, TypeConst{node})
	}
	return ret
}

type VectorType struct {
	*Node
}

func (n VectorType) Len() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

func (n VectorType) Elem() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type VirtualIndexField struct {
	*Node
}

func (n VirtualIndexField) VirtualIndex() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type VirtualityField struct {
	*Node
}

func (n VirtualityField) Virtuality() DwarfVirtuality {
	return ToLlvmNode(n.Child(selector.DwarfVirtuality)).(DwarfVirtuality)
}

type Visibility struct {
	*Node
}

type VoidType struct {
	*Node
}

type Volatile struct {
	*Node
}

type VtableHolderField struct {
	*Node
}

func (n VtableHolderField) VtableHolder() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type Weak struct {
	*Node
}

type XorExpr struct {
	*Node
}

func (n XorExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n XorExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type XorInst struct {
	*Node
}

func (n XorInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n XorInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n XorInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type ZExtExpr struct {
	*Node
}

func (n ZExtExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n ZExtExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type ZExtInst struct {
	*Node
}

func (n ZExtInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n ZExtInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n ZExtInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type ZeroInitializerConst struct {
	*Node
}
